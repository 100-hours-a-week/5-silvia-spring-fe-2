{"ast":null,"code":"var _jsxFileName = \"/Users/moolmin/Documents/GitHub/5-silvia-spring-fe/src/components/PasswordChangeForm.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { PasswordConfirmInputField, PasswordInputField } from './InputField';\nimport ToastMessage from './ToastMessage';\nimport * as Buttons from \"./Buttons\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PasswordChangeForm = () => {\n  _s();\n  const [successLabel, setSuccessLabel] = useState('');\n  const [errorLabel, setErrorLabel] = useState('');\n  const {\n    userId\n  } = useParams(); // Get userId from URL parameters\n\n  const [password, setPassword] = useState('');\n  const [confirmPassword, setConfirmPassword] = useState('');\n  const [passwordError, setPasswordError] = useState('');\n  const [confirmPasswordError, setConfirmPasswordError] = useState('');\n  const handlePasswordChange = e => {\n    setPassword(e.target.value);\n    validatePassword(e.target.value);\n  };\n  const handleConfirmPasswordChange = e => {\n    setConfirmPassword(e.target.value);\n    validateConfirmPassword(password, e.target.value);\n  };\n  const validatePassword = password => {\n    const passwordPattern = /^(?=.*[a-z])(?=.*[A-Z])(?=.*[!@#$%^&*]).{8,20}$/;\n    if (!password) {\n      setPasswordError('*비밀번호를 입력해주세요.');\n    } else if (!passwordPattern.test(password)) {\n      setPasswordError('*비밀번호는 8자 이상, 20자 이하이며, 대문자, 소문자, 숫자, 특수문자를 각각 최소 1개 포함해야 합니다.');\n    } else {\n      setPasswordError('');\n    }\n  };\n  const validateConfirmPassword = (password, confirmPassword) => {\n    if (!confirmPassword) {\n      setConfirmPasswordError('*비밀번호 확인을 입력해주세요.');\n    } else if (password !== confirmPassword) {\n      setConfirmPasswordError('*비밀번호가 일치하지 않습니다.');\n    } else {\n      setConfirmPasswordError('');\n    }\n  };\n  const clearLabels = () => {\n    setSuccessLabel('');\n    setErrorLabel('');\n  };\n  const handleSubmit = async e => {\n    e.preventDefault();\n\n    // Validate before submitting\n    validatePassword(password);\n    validateConfirmPassword(password, confirmPassword);\n    if (passwordError || confirmPasswordError) {\n      setErrorLabel(passwordError || confirmPasswordError);\n      return;\n    }\n    try {\n      const response = await fetch(`http://localhost:3001/api/accounts/${userId}/password`, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          password\n        }),\n        // Update the password in the request body\n        credentials: 'include'\n      });\n      if (!response.ok) {\n        const errorMessage = await response.text();\n        throw new Error(errorMessage);\n      }\n      setSuccessLabel('🥑 비밀번호 수정이 완료되었습니다.');\n    } catch (error) {\n      console.error('Error updating password:', error);\n      setErrorLabel(`Error: ${error.message}`);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    className: \"PasswordChangeForm\",\n    onSubmit: handleSubmit,\n    children: [/*#__PURE__*/_jsxDEV(PasswordInputField\n    // label=\"비밀번호*\"\n    , {\n      value: password,\n      onChange: handlePasswordChange,\n      error: passwordError\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(PasswordConfirmInputField\n    // label=\"비밀번호 확인*\"\n    , {\n      value: confirmPassword,\n      onChange: handleConfirmPasswordChange,\n      error: confirmPasswordError\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"PasswordBtnContainer\",\n      children: [/*#__PURE__*/_jsxDEV(Buttons.SubmitBtn, {\n        label: \"수정하기\",\n        type: \"submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"a\", {\n        href: \"/main\",\n        className: \"Text14\",\n        style: {\n          marginTop: '10px',\n          fontWeight: '500'\n        },\n        children: \"\\uBA54\\uC778\\uC73C\\uB85C \\uC774\\uB3D9\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(ToastMessage, {\n      successLabel: successLabel,\n      errorLabel: errorLabel,\n      clearLabels: clearLabels\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 89,\n    columnNumber: 9\n  }, this);\n};\n_s(PasswordChangeForm, \"ny4vrhliFKKwTphZT3WTg1MaVKs=\", false, function () {\n  return [useParams];\n});\n_c = PasswordChangeForm;\nexport default PasswordChangeForm;\nvar _c;\n$RefreshReg$(_c, \"PasswordChangeForm\");","map":{"version":3,"names":["React","useState","useParams","PasswordConfirmInputField","PasswordInputField","ToastMessage","Buttons","jsxDEV","_jsxDEV","PasswordChangeForm","_s","successLabel","setSuccessLabel","errorLabel","setErrorLabel","userId","password","setPassword","confirmPassword","setConfirmPassword","passwordError","setPasswordError","confirmPasswordError","setConfirmPasswordError","handlePasswordChange","e","target","value","validatePassword","handleConfirmPasswordChange","validateConfirmPassword","passwordPattern","test","clearLabels","handleSubmit","preventDefault","response","fetch","method","headers","body","JSON","stringify","credentials","ok","errorMessage","text","Error","error","console","message","className","onSubmit","children","onChange","fileName","_jsxFileName","lineNumber","columnNumber","SubmitBtn","label","type","href","style","marginTop","fontWeight","_c","$RefreshReg$"],"sources":["/Users/moolmin/Documents/GitHub/5-silvia-spring-fe/src/components/PasswordChangeForm.js"],"sourcesContent":["import React, { useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { PasswordConfirmInputField, PasswordInputField } from './InputField';\nimport ToastMessage from './ToastMessage';\nimport * as Buttons from \"./Buttons\";\n\nconst PasswordChangeForm = () => {\n    const [successLabel, setSuccessLabel] = useState('');\n    const [errorLabel, setErrorLabel] = useState('');\n    const { userId } = useParams(); // Get userId from URL parameters\n\n    const [password, setPassword] = useState('');\n    const [confirmPassword, setConfirmPassword] = useState('');\n\n    const [passwordError, setPasswordError] = useState('');\n    const [confirmPasswordError, setConfirmPasswordError] = useState('');\n\n    const handlePasswordChange = (e) => {\n        setPassword(e.target.value);\n        validatePassword(e.target.value);\n    };\n\n    const handleConfirmPasswordChange = (e) => {\n        setConfirmPassword(e.target.value);\n        validateConfirmPassword(password, e.target.value);\n    };\n\n    const validatePassword = (password) => {\n        const passwordPattern = /^(?=.*[a-z])(?=.*[A-Z])(?=.*[!@#$%^&*]).{8,20}$/;\n        if (!password) {\n            setPasswordError('*비밀번호를 입력해주세요.');\n        } else if (!passwordPattern.test(password)) {\n            setPasswordError('*비밀번호는 8자 이상, 20자 이하이며, 대문자, 소문자, 숫자, 특수문자를 각각 최소 1개 포함해야 합니다.');\n        } else {\n            setPasswordError('');\n        }\n    };\n\n    const validateConfirmPassword = (password, confirmPassword) => {\n        if (!confirmPassword) {\n            setConfirmPasswordError('*비밀번호 확인을 입력해주세요.');\n        } else if (password !== confirmPassword) {\n            setConfirmPasswordError('*비밀번호가 일치하지 않습니다.');\n        } else {\n            setConfirmPasswordError('');\n        }\n    };\n\n    const clearLabels = () => {\n        setSuccessLabel('');\n        setErrorLabel('');\n    };\n\n    const handleSubmit = async (e) => {\n        e.preventDefault();\n\n        // Validate before submitting\n        validatePassword(password);\n        validateConfirmPassword(password, confirmPassword);\n\n        if (passwordError || confirmPasswordError) {\n            setErrorLabel(passwordError || confirmPasswordError);\n            return;\n        }\n\n        try {\n            const response = await fetch(`http://localhost:3001/api/accounts/${userId}/password`, {\n                method: 'PUT',\n                headers: {\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify({ password }), // Update the password in the request body\n                credentials: 'include'\n            });\n\n            if (!response.ok) {\n                const errorMessage = await response.text();\n                throw new Error(errorMessage);\n            }\n\n            setSuccessLabel('🥑 비밀번호 수정이 완료되었습니다.');\n        } catch (error) {\n            console.error('Error updating password:', error);\n            setErrorLabel(`Error: ${error.message}`);\n        }\n    };\n\n    return (\n        <form className=\"PasswordChangeForm\" onSubmit={handleSubmit}>\n            <PasswordInputField\n                // label=\"비밀번호*\"\n                value={password}\n                onChange={handlePasswordChange}\n                error={passwordError}\n            />\n            <PasswordConfirmInputField\n                // label=\"비밀번호 확인*\"\n                value={confirmPassword}\n                onChange={handleConfirmPasswordChange}\n                error={confirmPasswordError}\n            />\n            <div className=\"PasswordBtnContainer\">\n                <Buttons.SubmitBtn\n                    label={\"수정하기\"}\n                    type=\"submit\"\n                />\n                <a href=\"/main\" className=\"Text14\" style={{marginTop: '10px', fontWeight: '500'}}>메인으로 이동</a>\n            </div>\n            <ToastMessage\n                successLabel={successLabel}\n                errorLabel={errorLabel}\n                clearLabels={clearLabels}\n            />\n        </form>\n    );\n};\n\nexport default PasswordChangeForm;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}