{"ast":null,"code":"var _jsxFileName = \"/Users/moolmin/Documents/GitHub/5-silvia-spring-fe/src/pages/PostPage.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { useParams, useNavigate } from 'react-router-dom';\nimport * as PostComponents from '../components/PostComponents';\nimport * as Buttons from '../components/Buttons';\nimport Modal from '../components/Modal';\nimport axios from 'axios';\nimport ToastMessage from \"../components/ToastMessage\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst getCookieValue = name => {\n  const value = `; ${document.cookie}`;\n  const parts = value.split(`; ${name}=`);\n  if (parts.length === 2) return parts.pop().split(';').shift();\n  return null;\n};\nconst formatDate = dateString => {\n  const date = new Date(dateString);\n  return date.toISOString().slice(0, 19).replace('T', ' ');\n};\nconst PostPage = () => {\n  _s();\n  const {\n    postId\n  } = useParams();\n  const navigate = useNavigate();\n  const [post, setPost] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [isModalVisible, setIsModalVisible] = useState(false);\n  const [comments, setComments] = useState([]);\n  const [commentToDelete, setCommentToDelete] = useState(null);\n  const [editingCommentId, setEditingCommentId] = useState(null);\n  const [commentText, setCommentText] = useState('');\n  const [users, setUsers] = useState([]);\n  const [successLabel, setSuccessLabel] = useState('');\n  const [errorLabel, setErrorLabel] = useState('');\n  const userId = getCookieValue('userId');\n  useEffect(() => {\n    const fetchPost = async () => {\n      try {\n        const postResponse = await fetch(`http://localhost:3001/api/posts/${postId}`);\n        if (!postResponse.ok) {\n          throw new Error('Failed to fetch post data');\n        }\n        const postData = await postResponse.json();\n        setPost(postData);\n        const usersResponse = await fetch('http://localhost:3001/api/accounts');\n        if (!usersResponse.ok) {\n          throw new Error('Failed to fetch users data');\n        }\n        const usersData = await usersResponse.json();\n        setUsers(usersData.users);\n        const commentsResponse = await fetch(`http://localhost:3001/api/posts/${postId}/comments`);\n        if (!commentsResponse.ok) {\n          throw new Error('Failed to fetch comments data');\n        }\n        const commentsData = await commentsResponse.json();\n        setComments(commentsData);\n        await axios.put(`http://localhost:3001/api/posts/${postId}/views`);\n      } catch (error) {\n        setError(error.message);\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchPost();\n  }, [postId]);\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 16\n    }, this);\n  }\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Error: \", error]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 16\n    }, this);\n  }\n  if (!post) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Post not found\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 16\n    }, this);\n  }\n  const handleEdit = async () => {\n    try {\n      const response = await axios.get(`http://localhost:3001/api/posts/${postId}/checkEditPermission`, {\n        withCredentials: true\n      });\n      if (response.status === 200) {\n        navigate(`/post/edit/${postId}`);\n      }\n    } catch (error) {\n      if (error.response && error.response.status === 403) {\n        setErrorLabel('🥑 수정 권한이 없습니다');\n        // alert('수정 권한이 없습니다');\n      } else {\n        console.error('Error checking edit permission:', error);\n        alert('권한 확인 중 오류가 발생했습니다.');\n      }\n    }\n  };\n  const showModal = (commentId = null) => {\n    setIsModalVisible(true);\n    document.body.style.overflow = 'hidden';\n    setCommentToDelete(commentId);\n  };\n  const closeModal = () => {\n    setIsModalVisible(false);\n    document.body.style.overflow = 'auto';\n    setCommentToDelete(null);\n  };\n  const confirmDelete = async () => {\n    try {\n      if (commentToDelete) {\n        const response = await fetch(`http://localhost:3001/api/posts/${postId}/comments/${commentToDelete}`, {\n          method: 'DELETE',\n          credentials: 'include'\n        });\n        if (!response.ok) {\n          if (response.status === 403) {\n            setErrorLabel('🥑 댓글 삭제 권한이 없습니다');\n            // alert('댓글 삭제 권한이 없습니다.');\n          } else {\n            throw new Error('Failed to delete comment');\n          }\n        } else {\n          setComments(prevComments => prevComments.filter(comment => comment.id !== commentToDelete));\n          setSuccessLabel('🥑 댓글이 삭제되었습니다.');\n          // alert('댓글이 삭제되었습니다.');\n        }\n      } else {\n        const response = await fetch(`http://localhost:3001/api/posts/${postId}`, {\n          method: 'DELETE',\n          credentials: 'include'\n        });\n        if (!response.ok) {\n          if (response.status === 403) {\n            setErrorLabel('🥑 게시글 삭제 권한이 없습니다');\n            // alert('게시글 삭제 권한이 없습니다.');\n          } else {\n            throw new Error('Failed to delete post');\n          }\n        } else {\n          setSuccessLabel('🥑 게시글이 삭제되었습니다.');\n          window.location.href = '/main';\n        }\n      }\n    } catch (error) {\n      console.error('삭제 중 오류 발생:', error);\n      alert('삭제 중 오류가 발생했습니다.');\n    } finally {\n      closeModal();\n    }\n  };\n  const clearLabels = () => {\n    setSuccessLabel('');\n    setErrorLabel('');\n  };\n  const handleCommentInputChange = e => {\n    setCommentText(e.target.value);\n  };\n  const handleCommentEdit = (commentId, commentText) => {\n    setEditingCommentId(commentId);\n    setCommentText(commentText);\n  };\n  const handleCommentRegister = async () => {\n    if (editingCommentId) {\n      // Update existing comment\n      try {\n        console.log('Updating comment:', {\n          postId,\n          editingCommentId,\n          commentText\n        });\n        const response = await axios.put(`http://localhost:3001/api/posts/${postId}/comments/${editingCommentId}`, {\n          comment_content: commentText\n        }, {\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          withCredentials: true\n        });\n        if (response.status === 200) {\n          setComments(prevComments => prevComments.map(comment => comment.id === editingCommentId ? {\n            ...comment,\n            comment_content: commentText\n          } : comment));\n        } else {\n          throw new Error('Failed to update comment');\n        }\n      } catch (error) {\n        var _error$response;\n        console.error('Error updating comment:', ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.data) || error.message);\n        alert('An error occurred while updating the comment. Please try again later.');\n      } finally {\n        setEditingCommentId(null);\n        setCommentText('');\n      }\n    } else {\n      // Add new comment\n      try {\n        console.log('Adding new comment:', {\n          postId,\n          commentText,\n          userId\n        });\n        const response = await axios.post(`http://localhost:3001/api/posts/${postId}/comments`, {\n          comment_content: commentText,\n          user_id: userId\n        }, {\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          withCredentials: true\n        });\n        if (response.status === 201) {\n          const newComment = response.data;\n          setComments(prevComments => [...prevComments, newComment]);\n          setCommentText('');\n        } else {\n          throw new Error('Failed to add comment');\n        }\n      } catch (error) {\n        var _error$response2;\n        console.error('Error adding comment:', ((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.data) || error.message);\n        alert('An error occurred while adding the comment. Please try again later.');\n      }\n    }\n  };\n  function formatViews(views) {\n    if (views >= 1000000) {\n      return (views / 1000000).toFixed(1) + \"M\";\n    } else if (views >= 100000) {\n      return (views / 1000).toFixed(0) + \"k\";\n    } else if (views >= 10000) {\n      return (views / 1000).toFixed(1) + \"k\";\n    } else if (views >= 1000) {\n      return (views / 1000).toFixed(1) + \"k\";\n    } else {\n      return views.toString();\n    }\n  }\n\n  // const author = post ? post.user_id : null;\n  const author = users.find(user => user.user_id === post.user_id);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"PostPage\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"Post\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"PostMetaData\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"PostMetaDataInner\",\n          children: [/*#__PURE__*/_jsxDEV(PostComponents.PostTitle, {\n            postTitle: post.title\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 259,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"PostSubContainer\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"PostSubContainerLeft\",\n              children: [author && /*#__PURE__*/_jsxDEV(_Fragment, {\n                children: [/*#__PURE__*/_jsxDEV(PostComponents.AuthorIcon, {\n                  AuthorImg: author.profile_picture\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 264,\n                  columnNumber: 41\n                }, this), /*#__PURE__*/_jsxDEV(PostComponents.AuthorName, {\n                  AuthorName: author.nickname\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 265,\n                  columnNumber: 41\n                }, this)]\n              }, void 0, true), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"PostDateContainer\",\n                children: /*#__PURE__*/_jsxDEV(PostComponents.Date, {\n                  date: formatDate(post.create_dt)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 269,\n                  columnNumber: 37\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 268,\n                columnNumber: 33\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 261,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"PostBtnContainer\",\n              children: [/*#__PURE__*/_jsxDEV(Buttons.PostBtn, {\n                label: \"\\uC218\\uC815\",\n                onClick: handleEdit\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 273,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(Buttons.PostBtn, {\n                label: \"\\uC0AD\\uC81C\",\n                onClick: () => showModal()\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 274,\n                columnNumber: 33\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 272,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 260,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 258,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 257,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"PostBody\",\n        children: [/*#__PURE__*/_jsxDEV(PostComponents.PostImage, {\n          PostImg: post.post_picture\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 280,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(PostComponents.PostContent, {\n          label: post.article\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 281,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 279,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"PostCountContainer\",\n        children: [/*#__PURE__*/_jsxDEV(PostComponents.PostCount, {\n          num: formatViews(post.views),\n          label: \"\\uC870\\uD68C\\uC218\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 284,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(PostComponents.PostCount, {\n          num: formatViews(comments.length),\n          label: \"\\uB313\\uAE00\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 285,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 283,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 256,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"CommentForm\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"CommentInputContainer\",\n        children: /*#__PURE__*/_jsxDEV(\"textarea\", {\n          type: \"text\",\n          className: \"CommentInput\",\n          placeholder: \"\\uB313\\uAE00\\uC744 \\uB0A8\\uACA8\\uC8FC\\uC138\\uC694!\",\n          value: commentText,\n          onChange: handleCommentInputChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 290,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 289,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 298,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"CommentBtnContainer\",\n        children: /*#__PURE__*/_jsxDEV(Buttons.CreateBtn, {\n          label: editingCommentId ? \"댓글 수정\" : \"댓글 등록\",\n          style: {\n            marginRight: '18px'\n          },\n          onClick: handleCommentRegister\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 300,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 299,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 288,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"CommentsArea\",\n      children: comments.map(comment => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"Comment\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"CommentTopArea\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"CommentAuthor\",\n            children: [/*#__PURE__*/_jsxDEV(\"img\", {\n              src: comment.profile_picture,\n              alt: \"Author\",\n              className: \"AuthorIcon\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 312,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"CommenterName\",\n              children: comment.nickname\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 313,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"CommentDateContainer\",\n              children: formatDate(comment.create_dt)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 314,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 311,\n            columnNumber: 29\n          }, this), comment.user_id && comment.user_id.toString() === userId && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"CommentBtn\",\n            children: [/*#__PURE__*/_jsxDEV(Buttons.PostBtn, {\n              label: \"\\uC218\\uC815\",\n              onClick: () => handleCommentEdit(comment.id, comment.comment_content)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 318,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(Buttons.PostBtn, {\n              label: \"\\uC0AD\\uC81C\",\n              onClick: () => showModal(comment.id)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 320,\n              columnNumber: 37\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 317,\n            columnNumber: 33\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 310,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"CommentContent\",\n          children: comment.comment_content\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 324,\n          columnNumber: 25\n        }, this)]\n      }, comment.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 309,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 307,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Modal, {\n      isVisible: isModalVisible,\n      ModalLabel: commentToDelete ? \"댓글을 삭제하시겠습니까?\" : \"게시글을 삭제하시겠습니까?\",\n      ModalContent: commentToDelete ? \"삭제한 댓글은 복구할 수 없습니다.\" : \"삭제한 게시글은 복구할 수 없습니다.\",\n      onClose: closeModal,\n      onConfirm: confirmDelete\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 328,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(ToastMessage, {\n      successLabel: successLabel,\n      errorLabel: errorLabel,\n      clearLabels: clearLabels\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 335,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 255,\n    columnNumber: 9\n  }, this);\n};\n_s(PostPage, \"ayuGnoP9D8Xznzk4wcULH6w3p78=\", false, function () {\n  return [useParams, useNavigate];\n});\n_c = PostPage;\nexport default PostPage;\nvar _c;\n$RefreshReg$(_c, \"PostPage\");","map":{"version":3,"names":["React","useState","useEffect","useParams","useNavigate","PostComponents","Buttons","Modal","axios","ToastMessage","jsxDEV","_jsxDEV","Fragment","_Fragment","getCookieValue","name","value","document","cookie","parts","split","length","pop","shift","formatDate","dateString","date","Date","toISOString","slice","replace","PostPage","_s","postId","navigate","post","setPost","loading","setLoading","error","setError","isModalVisible","setIsModalVisible","comments","setComments","commentToDelete","setCommentToDelete","editingCommentId","setEditingCommentId","commentText","setCommentText","users","setUsers","successLabel","setSuccessLabel","errorLabel","setErrorLabel","userId","fetchPost","postResponse","fetch","ok","Error","postData","json","usersResponse","usersData","commentsResponse","commentsData","put","message","children","fileName","_jsxFileName","lineNumber","columnNumber","handleEdit","response","get","withCredentials","status","console","alert","showModal","commentId","body","style","overflow","closeModal","confirmDelete","method","credentials","prevComments","filter","comment","id","window","location","href","clearLabels","handleCommentInputChange","e","target","handleCommentEdit","handleCommentRegister","log","comment_content","headers","map","_error$response","data","user_id","newComment","_error$response2","formatViews","views","toFixed","toString","author","find","user","className","PostTitle","postTitle","title","AuthorIcon","AuthorImg","profile_picture","AuthorName","nickname","create_dt","PostBtn","label","onClick","PostImage","PostImg","post_picture","PostContent","article","PostCount","num","type","placeholder","onChange","CreateBtn","marginRight","src","alt","isVisible","ModalLabel","ModalContent","onClose","onConfirm","_c","$RefreshReg$"],"sources":["/Users/moolmin/Documents/GitHub/5-silvia-spring-fe/src/pages/PostPage.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { useParams, useNavigate } from 'react-router-dom';\nimport * as PostComponents from '../components/PostComponents';\nimport * as Buttons from '../components/Buttons';\nimport Modal from '../components/Modal';\nimport axios from 'axios';\nimport ToastMessage from \"../components/ToastMessage\";\n\nconst getCookieValue = (name) => {\n    const value = `; ${document.cookie}`;\n    const parts = value.split(`; ${name}=`);\n    if (parts.length === 2) return parts.pop().split(';').shift();\n    return null;\n};\n\nconst formatDate = (dateString) => {\n    const date = new Date(dateString);\n    return date.toISOString().slice(0, 19).replace('T', ' ');\n};\n\nconst PostPage = () => {\n    const {postId} = useParams();\n    const navigate = useNavigate();\n    const [post, setPost] = useState(null);\n    const [loading, setLoading] = useState(true);\n    const [error, setError] = useState(null);\n    const [isModalVisible, setIsModalVisible] = useState(false);\n    const [comments, setComments] = useState([]);\n    const [commentToDelete, setCommentToDelete] = useState(null);\n    const [editingCommentId, setEditingCommentId] = useState(null);\n    const [commentText, setCommentText] = useState('');\n    const [users, setUsers] = useState([]);\n    const [successLabel, setSuccessLabel] = useState('');\n    const [errorLabel, setErrorLabel] = useState('');\n\n    const userId = getCookieValue('userId');\n\n    useEffect(() => {\n        const fetchPost = async () => {\n            try {\n                const postResponse = await fetch(`http://localhost:3001/api/posts/${postId}`);\n                if (!postResponse.ok) {\n                    throw new Error('Failed to fetch post data');\n                }\n                const postData = await postResponse.json();\n                setPost(postData);\n\n                const usersResponse = await fetch('http://localhost:3001/api/accounts');\n                if (!usersResponse.ok) {\n                    throw new Error('Failed to fetch users data');\n                }\n                const usersData = await usersResponse.json();\n                setUsers(usersData.users);\n\n                const commentsResponse = await fetch(`http://localhost:3001/api/posts/${postId}/comments`);\n                if (!commentsResponse.ok) {\n                    throw new Error('Failed to fetch comments data');\n                }\n                const commentsData = await commentsResponse.json();\n                setComments(commentsData);\n\n                await axios.put(`http://localhost:3001/api/posts/${postId}/views`);\n            } catch (error) {\n                setError(error.message);\n            } finally {\n                setLoading(false);\n            }\n        };\n\n        fetchPost();\n    }, [postId]);\n\n\n    if (loading) {\n        return <p>Loading...</p>;\n    }\n\n    if (error) {\n        return <p>Error: {error}</p>;\n    }\n\n    if (!post) {\n        return <p>Post not found</p>;\n    }\n\n    const handleEdit = async () => {\n        try {\n            const response = await axios.get(`http://localhost:3001/api/posts/${postId}/checkEditPermission`, {\n                withCredentials: true\n            });\n\n            if (response.status === 200) {\n                navigate(`/post/edit/${postId}`);\n            }\n        } catch (error) {\n            if (error.response && error.response.status === 403) {\n                setErrorLabel('🥑 수정 권한이 없습니다');\n                // alert('수정 권한이 없습니다');\n            } else {\n                console.error('Error checking edit permission:', error);\n                alert('권한 확인 중 오류가 발생했습니다.');\n            }\n        }\n    };\n\n    const showModal = (commentId = null) => {\n        setIsModalVisible(true);\n        document.body.style.overflow = 'hidden';\n        setCommentToDelete(commentId);\n    };\n\n    const closeModal = () => {\n        setIsModalVisible(false);\n        document.body.style.overflow = 'auto';\n        setCommentToDelete(null);\n    };\n\n    const confirmDelete = async () => {\n        try {\n            if (commentToDelete) {\n                const response = await fetch(`http://localhost:3001/api/posts/${postId}/comments/${commentToDelete}`, {\n                    method: 'DELETE',\n                    credentials: 'include',\n                });\n                if (!response.ok) {\n                    if (response.status === 403) {\n                        setErrorLabel('🥑 댓글 삭제 권한이 없습니다');\n                        // alert('댓글 삭제 권한이 없습니다.');\n                    } else {\n                        throw new Error('Failed to delete comment');\n                    }\n                } else {\n                    setComments(prevComments => prevComments.filter(comment => comment.id !== commentToDelete));\n                    setSuccessLabel('🥑 댓글이 삭제되었습니다.');\n                    // alert('댓글이 삭제되었습니다.');\n                }\n            } else {\n                const response = await fetch(`http://localhost:3001/api/posts/${postId}`, {\n                    method: 'DELETE',\n                    credentials: 'include',\n                });\n                if (!response.ok) {\n                    if (response.status === 403) {\n                        setErrorLabel('🥑 게시글 삭제 권한이 없습니다');\n                        // alert('게시글 삭제 권한이 없습니다.');\n                    } else {\n                        throw new Error('Failed to delete post');\n                    }\n                } else {\n                    setSuccessLabel('🥑 게시글이 삭제되었습니다.');\n                    window.location.href = '/main';\n                }\n            }\n        } catch (error) {\n            console.error('삭제 중 오류 발생:', error);\n            alert('삭제 중 오류가 발생했습니다.');\n        } finally {\n            closeModal();\n        }\n    };\n\n    const clearLabels = () => {\n        setSuccessLabel('');\n        setErrorLabel('');\n    };\n\n\n    const handleCommentInputChange = (e) => {\n        setCommentText(e.target.value);\n    };\n\n    const handleCommentEdit = (commentId, commentText) => {\n        setEditingCommentId(commentId);\n        setCommentText(commentText);\n    };\n\n    const handleCommentRegister = async () => {\n        if (editingCommentId) {\n            // Update existing comment\n            try {\n                console.log('Updating comment:', { postId, editingCommentId, commentText });\n                const response = await axios.put(\n                    `http://localhost:3001/api/posts/${postId}/comments/${editingCommentId}`,\n                    { comment_content: commentText },\n                    {\n                        headers: {\n                            'Content-Type': 'application/json'\n                        },\n                        withCredentials: true\n                    }\n                );\n\n                if (response.status === 200) {\n                    setComments(prevComments => prevComments.map(comment =>\n                        comment.id === editingCommentId ? { ...comment, comment_content: commentText } : comment\n                    ));\n                } else {\n                    throw new Error('Failed to update comment');\n                }\n            } catch (error) {\n                console.error('Error updating comment:', error.response?.data || error.message);\n                alert('An error occurred while updating the comment. Please try again later.');\n            } finally {\n                setEditingCommentId(null);\n                setCommentText('');\n            }\n        } else {\n            // Add new comment\n            try {\n                console.log('Adding new comment:', { postId, commentText, userId });\n                const response = await axios.post(\n                    `http://localhost:3001/api/posts/${postId}/comments`,\n                    { comment_content: commentText, user_id: userId },\n                    {\n                        headers: {\n                            'Content-Type': 'application/json'\n                        },\n                        withCredentials: true\n                    }\n                );\n\n                if (response.status === 201) {\n                    const newComment = response.data;\n                    setComments(prevComments => [...prevComments, newComment]);\n                    setCommentText('');\n                } else {\n                    throw new Error('Failed to add comment');\n                }\n            } catch (error) {\n                console.error('Error adding comment:', error.response?.data || error.message);\n                alert('An error occurred while adding the comment. Please try again later.');\n            }\n        }\n    };\n\n\n    function formatViews(views) {\n        if (views >= 1000000) {\n            return (views / 1000000).toFixed(1) + \"M\";\n        } else if (views >= 100000) {\n            return (views / 1000).toFixed(0) + \"k\";\n        } else if (views >= 10000) {\n            return (views / 1000).toFixed(1) + \"k\";\n        } else if (views >= 1000) {\n            return (views / 1000).toFixed(1) + \"k\";\n        } else {\n            return views.toString();\n        }\n    }\n\n    // const author = post ? post.user_id : null;\n    const author = users.find(user => user.user_id === post.user_id);\n\n    return (\n        <div className=\"PostPage\">\n            <div className=\"Post\">\n                <div className=\"PostMetaData\">\n                    <div className=\"PostMetaDataInner\">\n                        <PostComponents.PostTitle postTitle={post.title}/>\n                        <div className=\"PostSubContainer\">\n                            <div className=\"PostSubContainerLeft\">\n                                {author && (\n                                    <>\n                                        <PostComponents.AuthorIcon AuthorImg={author.profile_picture}/>\n                                        <PostComponents.AuthorName AuthorName={author.nickname}/>\n                                    </>\n                                )}\n                                <div className=\"PostDateContainer\">\n                                    <PostComponents.Date date={formatDate(post.create_dt)}/>\n                                </div>\n                            </div>\n                            <div className=\"PostBtnContainer\">\n                                <Buttons.PostBtn label=\"수정\" onClick={handleEdit}/>\n                                <Buttons.PostBtn label=\"삭제\" onClick={() => showModal()}/>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n                <div className=\"PostBody\">\n                    <PostComponents.PostImage PostImg={post.post_picture}/>\n                    <PostComponents.PostContent label={post.article}/>\n                </div>\n                <div className=\"PostCountContainer\">\n                    <PostComponents.PostCount num={formatViews(post.views)} label=\"조회수\"/>\n                    <PostComponents.PostCount num={formatViews(comments.length)} label=\"댓글\"/>\n                </div>\n            </div>\n            <div className=\"CommentForm\">\n                <div className=\"CommentInputContainer\">\n                <textarea\n                    type=\"text\"\n                    className=\"CommentInput\"\n                    placeholder=\"댓글을 남겨주세요!\"\n                    value={commentText}\n                    onChange={handleCommentInputChange}\n                ></textarea>\n                </div>\n                <hr/>\n                <div className=\"CommentBtnContainer\">\n                    <Buttons.CreateBtn\n                        label={editingCommentId ? \"댓글 수정\" : \"댓글 등록\"}\n                        style={{marginRight: '18px'}}\n                        onClick={handleCommentRegister}\n                    />\n                </div>\n            </div>\n            <div className=\"CommentsArea\">\n                {comments.map((comment) => (\n                    <div key={comment.id} className=\"Comment\">\n                        <div className=\"CommentTopArea\">\n                            <div className=\"CommentAuthor\">\n                                <img src={comment.profile_picture} alt=\"Author\" className=\"AuthorIcon\"/>\n                                <div className=\"CommenterName\">{comment.nickname}</div>\n                                <div className=\"CommentDateContainer\">{formatDate(comment.create_dt)}</div>\n                            </div>\n                            {comment.user_id && comment.user_id.toString() === userId && (\n                                <div className=\"CommentBtn\">\n                                    <Buttons.PostBtn label=\"수정\"\n                                                     onClick={() => handleCommentEdit(comment.id, comment.comment_content)}/>\n                                    <Buttons.PostBtn label=\"삭제\" onClick={() => showModal(comment.id)}/>\n                                </div>\n                            )}\n                        </div>\n                        <div className=\"CommentContent\">{comment.comment_content}</div>\n                    </div>\n                ))}\n            </div>\n            <Modal\n                isVisible={isModalVisible}\n                ModalLabel={commentToDelete ? \"댓글을 삭제하시겠습니까?\" : \"게시글을 삭제하시겠습니까?\"}\n                ModalContent={commentToDelete ? \"삭제한 댓글은 복구할 수 없습니다.\" : \"삭제한 게시글은 복구할 수 없습니다.\"}\n                onClose={closeModal}\n                onConfirm={confirmDelete}\n            />\n            <ToastMessage successLabel={successLabel} errorLabel={errorLabel} clearLabels={clearLabels} />\n\n        </div>\n    );\n};\n\nexport default PostPage;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}