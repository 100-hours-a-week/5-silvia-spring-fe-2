{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useMemo } from 'react';\nconst useUserData = userId => {\n  _s();\n  const [nickname, setNickname] = useState('');\n  const [email, setEmail] = useState('');\n  const [showToast, setShowToast] = useState(false);\n  useMemo(() => {\n    const fetchUserData = async () => {\n      try {\n        const response = await fetch(`http://localhost:3001/api/accounts/${userId}`, {\n          credentials: 'include'\n        });\n        if (!response.ok) {\n          throw new Error('Failed to fetch user data');\n        }\n        const data = await response.json();\n        const user = data.user;\n        if (user) {\n          setNickname(user.nickname);\n          setEmail(user.email);\n        }\n      } catch (error) {\n        console.error('Error fetching user data:', error);\n      }\n    };\n    fetchUserData();\n  }, [userId]);\n  const updateNickname = async newNickname => {\n    try {\n      const response = await fetch(`http://localhost:3001/api/accounts/${userId}/nickname`, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          nickname: newNickname\n        }),\n        credentials: 'include'\n      });\n      if (!response.ok) {\n        const errorMessage = await response.text();\n        if (response.status === 409) {\n          throw new Error('중복된 닉네임입니다.');\n        } else {\n          throw new Error(errorMessage);\n        }\n      }\n      setNickname(newNickname);\n      setShowToast(true);\n      setTimeout(() => setShowToast(false), 2000);\n    } catch (error) {\n      console.error('Error updating user data:', error);\n      throw new Error(error.message);\n    }\n  };\n  return {\n    nickname,\n    email,\n    showToast,\n    setNickname,\n    updateNickname,\n    setShowToast\n  };\n};\n_s(useUserData, \"caVHfkQToG1ogBizLc2+WeB/oG0=\");\nexport default useUserData;","map":{"version":3,"names":["useState","useMemo","useUserData","userId","_s","nickname","setNickname","email","setEmail","showToast","setShowToast","fetchUserData","response","fetch","credentials","ok","Error","data","json","user","error","console","updateNickname","newNickname","method","headers","body","JSON","stringify","errorMessage","text","status","setTimeout","message"],"sources":["/Users/moolmin/Documents/GitHub/5-silvia-spring-fe/src/hooks/useUserData.js"],"sourcesContent":["import { useState, useMemo } from 'react';\n\nconst useUserData = (userId) => {\n    const [nickname, setNickname] = useState('');\n    const [email, setEmail] = useState('');\n    const [showToast, setShowToast] = useState(false);\n\n    useMemo(() => {\n        const fetchUserData = async () => {\n            try {\n                const response = await fetch(`http://localhost:3001/api/accounts/${userId}`, {\n                    credentials: 'include'\n                });\n                if (!response.ok) {\n                    throw new Error('Failed to fetch user data');\n                }\n                const data = await response.json();\n                const user = data.user;\n                if (user) {\n                    setNickname(user.nickname);\n                    setEmail(user.email);\n                }\n            } catch (error) {\n                console.error('Error fetching user data:', error);\n            }\n        };\n\n        fetchUserData();\n    }, [userId]);\n\n    const updateNickname = async (newNickname) => {\n        try {\n            const response = await fetch(`http://localhost:3001/api/accounts/${userId}/nickname`, {\n                method: 'PUT',\n                headers: {\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify({ nickname: newNickname }),\n                credentials: 'include'\n            });\n\n            if (!response.ok) {\n                const errorMessage = await response.text();\n                if (response.status === 409) {\n                    throw new Error('중복된 닉네임입니다.');\n                } else {\n                    throw new Error(errorMessage);\n                }\n            }\n\n            setNickname(newNickname);\n            setShowToast(true);\n            setTimeout(() => setShowToast(false), 2000);\n        } catch (error) {\n            console.error('Error updating user data:', error);\n            throw new Error(error.message);\n        }\n    };\n\n    return {\n        nickname,\n        email,\n        showToast,\n        setNickname,\n        updateNickname,\n        setShowToast\n    };\n};\n\nexport default useUserData;\n"],"mappings":";AAAA,SAASA,QAAQ,EAAEC,OAAO,QAAQ,OAAO;AAEzC,MAAMC,WAAW,GAAIC,MAAM,IAAK;EAAAC,EAAA;EAC5B,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGN,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAACO,KAAK,EAAEC,QAAQ,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAM,CAACS,SAAS,EAAEC,YAAY,CAAC,GAAGV,QAAQ,CAAC,KAAK,CAAC;EAEjDC,OAAO,CAAC,MAAM;IACV,MAAMU,aAAa,GAAG,MAAAA,CAAA,KAAY;MAC9B,IAAI;QACA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,sCAAsCV,MAAM,EAAE,EAAE;UACzEW,WAAW,EAAE;QACjB,CAAC,CAAC;QACF,IAAI,CAACF,QAAQ,CAACG,EAAE,EAAE;UACd,MAAM,IAAIC,KAAK,CAAC,2BAA2B,CAAC;QAChD;QACA,MAAMC,IAAI,GAAG,MAAML,QAAQ,CAACM,IAAI,CAAC,CAAC;QAClC,MAAMC,IAAI,GAAGF,IAAI,CAACE,IAAI;QACtB,IAAIA,IAAI,EAAE;UACNb,WAAW,CAACa,IAAI,CAACd,QAAQ,CAAC;UAC1BG,QAAQ,CAACW,IAAI,CAACZ,KAAK,CAAC;QACxB;MACJ,CAAC,CAAC,OAAOa,KAAK,EAAE;QACZC,OAAO,CAACD,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC;MACrD;IACJ,CAAC;IAEDT,aAAa,CAAC,CAAC;EACnB,CAAC,EAAE,CAACR,MAAM,CAAC,CAAC;EAEZ,MAAMmB,cAAc,GAAG,MAAOC,WAAW,IAAK;IAC1C,IAAI;MACA,MAAMX,QAAQ,GAAG,MAAMC,KAAK,CAAC,sCAAsCV,MAAM,WAAW,EAAE;QAClFqB,MAAM,EAAE,KAAK;QACbC,OAAO,EAAE;UACL,cAAc,EAAE;QACpB,CAAC;QACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;UAAEvB,QAAQ,EAAEkB;QAAY,CAAC,CAAC;QAC/CT,WAAW,EAAE;MACjB,CAAC,CAAC;MAEF,IAAI,CAACF,QAAQ,CAACG,EAAE,EAAE;QACd,MAAMc,YAAY,GAAG,MAAMjB,QAAQ,CAACkB,IAAI,CAAC,CAAC;QAC1C,IAAIlB,QAAQ,CAACmB,MAAM,KAAK,GAAG,EAAE;UACzB,MAAM,IAAIf,KAAK,CAAC,aAAa,CAAC;QAClC,CAAC,MAAM;UACH,MAAM,IAAIA,KAAK,CAACa,YAAY,CAAC;QACjC;MACJ;MAEAvB,WAAW,CAACiB,WAAW,CAAC;MACxBb,YAAY,CAAC,IAAI,CAAC;MAClBsB,UAAU,CAAC,MAAMtB,YAAY,CAAC,KAAK,CAAC,EAAE,IAAI,CAAC;IAC/C,CAAC,CAAC,OAAOU,KAAK,EAAE;MACZC,OAAO,CAACD,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC;MACjD,MAAM,IAAIJ,KAAK,CAACI,KAAK,CAACa,OAAO,CAAC;IAClC;EACJ,CAAC;EAED,OAAO;IACH5B,QAAQ;IACRE,KAAK;IACLE,SAAS;IACTH,WAAW;IACXgB,cAAc;IACdZ;EACJ,CAAC;AACL,CAAC;AAACN,EAAA,CAjEIF,WAAW;AAmEjB,eAAeA,WAAW","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}