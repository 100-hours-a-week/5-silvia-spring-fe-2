{"ast":null,"code":"var _jsxFileName = \"/Users/moolmin/Documents/GitHub/5-silvia-spring-fe/src/components/LoginForm.js\",\n  _s = $RefreshSig$();\nimport { useNavigate } from 'react-router-dom';\nimport React, { useState } from 'react';\nimport { EmailInputField, PasswordInputField } from './InputField';\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst LoginForm = () => {\n  _s();\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n  const [emailError, setEmailError] = useState('');\n  const [passwordError, setPasswordError] = useState('');\n  const navigate = useNavigate(); // Define navigate\n\n  const handleEmailChange = e => {\n    setEmail(e.target.value);\n    validateEmail(e.target.value);\n  };\n  const handlePasswordChange = e => {\n    setPassword(e.target.value);\n    validatePassword(e.target.value);\n  };\n  const validateEmail = email => {\n    if (!email) {\n      setEmailError('*이메일을 입력해주세요.');\n    } else if (!/\\S+@\\S+\\.\\S+/.test(email)) {\n      setEmailError('*올바른 이메일 주소 형식을 입력해주세요. (예: 123@example.com)');\n    } else {\n      setEmailError('');\n    }\n  };\n  const validatePassword = password => {\n    const passwordPattern = /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[!@#$%^&*]).{8,20}$/;\n    if (!password) {\n      setPasswordError('*비밀번호를 입력해주세요.');\n    } else if (!passwordPattern.test(password)) {\n      setPasswordError('*비밀번호는 8자 이상, 20자 이하이며, 대문자, 소문자, 숫자, 특수문자를 각각 최소 1개 포함해야 합니다.');\n    } else {\n      setPasswordError('');\n    }\n  };\n  const handleSubmit = e => {\n    e.preventDefault();\n\n    // Validate email and password\n    validateEmail(email);\n    validatePassword(password);\n\n    // Proceed with login if there are no errors\n    if (!emailError && !passwordError) {\n      login(email, password);\n    } else {\n      toast.error('올바른 이메일과 비밀번호를 입력해주세요.');\n    }\n  };\n  const login = (email, password) => {\n    const options = {\n      method: 'POST',\n      credentials: 'include',\n      // Include cookies\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        email,\n        password\n      })\n    };\n    console.log('Sending login request with email:', email);\n    console.log('Sending login request with password:', password);\n    fetch('http://localhost:3001/login', options).then(response => response.json()).then(data => {\n      if (data.success) {\n        localStorage.setItem('nickname', data.nickname);\n        navigate('/main');\n        // toast.success(`${data.nickname}님 안녕하세요!`);\n        // setTimeout(() => {\n        //     navigate('/main');\n        // }, 3000);\n      } else {\n        toast.error(`인증 실패: ${data.message}`);\n      }\n    }).catch(error => {\n      console.error('로그인 오류:', error);\n      toast.error('로그인 중 오류가 발생했습니다.');\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    className: \"LoginForm\",\n    onSubmit: handleSubmit,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"Text32\",\n      style: {\n        marginBottom: '51px'\n      },\n      children: \"Login\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(EmailInputField, {\n      value: email,\n      onChange: handleEmailChange,\n      placeholder: \"\\uC774\\uBA54\\uC77C\\uC744 \\uC785\\uB825\\uD558\\uC138\\uC694\",\n      error: emailError\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(PasswordInputField, {\n      value: password,\n      onChange: handlePasswordChange,\n      placeholder: \"\\uBE44\\uBC00\\uBC88\\uD638\\uB97C \\uC785\\uB825\\uD558\\uC138\\uC694\",\n      error: passwordError\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"SubmitBtn\",\n      style: {\n        marginTop: '5px'\n      },\n      children: \"\\uB85C\\uADF8\\uC778\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"signUpTextContainer\",\n      style: {\n        display: 'flex',\n        justifyContent: 'center',\n        alignItems: 'center',\n        marginTop: '12px'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        style: {\n          margin: 0,\n          fontSize: '14px'\n        },\n        children: \"\\uC544\\uC9C1 \\uACC4\\uC815\\uC774 \\uC5C6\\uB098\\uC694?\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"a\", {\n        href: \"/register\",\n        className: \"Text14\",\n        style: {\n          marginLeft: '8px',\n          fontWeight: '800'\n        },\n        children: \"\\uD68C\\uC6D0\\uAC00\\uC785\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(ToastContainer, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 97,\n    columnNumber: 9\n  }, this);\n};\n_s(LoginForm, \"OEMjGIKf0uyNo1+Wd0uI/AiCj4A=\", false, function () {\n  return [useNavigate];\n});\n_c = LoginForm;\nexport default LoginForm;\nvar _c;\n$RefreshReg$(_c, \"LoginForm\");","map":{"version":3,"names":["useNavigate","React","useState","EmailInputField","PasswordInputField","ToastContainer","toast","jsxDEV","_jsxDEV","LoginForm","_s","email","setEmail","password","setPassword","emailError","setEmailError","passwordError","setPasswordError","navigate","handleEmailChange","e","target","value","validateEmail","handlePasswordChange","validatePassword","test","passwordPattern","handleSubmit","preventDefault","login","error","options","method","credentials","headers","body","JSON","stringify","console","log","fetch","then","response","json","data","success","localStorage","setItem","nickname","message","catch","className","onSubmit","children","style","marginBottom","fileName","_jsxFileName","lineNumber","columnNumber","onChange","placeholder","marginTop","display","justifyContent","alignItems","margin","fontSize","href","marginLeft","fontWeight","_c","$RefreshReg$"],"sources":["/Users/moolmin/Documents/GitHub/5-silvia-spring-fe/src/components/LoginForm.js"],"sourcesContent":["import { useNavigate } from 'react-router-dom';\nimport React, { useState } from 'react';\nimport { EmailInputField, PasswordInputField } from './InputField';\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\n\n\nconst LoginForm = () => {\n    const [email, setEmail] = useState('');\n    const [password, setPassword] = useState('');\n    const [emailError, setEmailError] = useState('');\n    const [passwordError, setPasswordError] = useState('');\n\n    const navigate = useNavigate(); // Define navigate\n\n    const handleEmailChange = (e) => {\n        setEmail(e.target.value);\n        validateEmail(e.target.value);\n    };\n\n    const handlePasswordChange = (e) => {\n        setPassword(e.target.value);\n        validatePassword(e.target.value);\n    };\n\n    const validateEmail = (email) => {\n        if (!email) {\n            setEmailError('*이메일을 입력해주세요.');\n        } else if (!/\\S+@\\S+\\.\\S+/.test(email)) {\n            setEmailError('*올바른 이메일 주소 형식을 입력해주세요. (예: 123@example.com)');\n        } else {\n            setEmailError('');\n        }\n    };\n\n    const validatePassword = (password) => {\n        const passwordPattern = /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[!@#$%^&*]).{8,20}$/;\n\n        if (!password) {\n            setPasswordError('*비밀번호를 입력해주세요.');\n        } else if (!passwordPattern.test(password)) {\n            setPasswordError('*비밀번호는 8자 이상, 20자 이하이며, 대문자, 소문자, 숫자, 특수문자를 각각 최소 1개 포함해야 합니다.');\n        } else {\n            setPasswordError('');\n        }\n    };\n\n    const handleSubmit = (e) => {\n        e.preventDefault();\n\n        // Validate email and password\n        validateEmail(email);\n        validatePassword(password);\n\n        // Proceed with login if there are no errors\n        if (!emailError && !passwordError) {\n            login(email, password);\n        } else {\n            toast.error('올바른 이메일과 비밀번호를 입력해주세요.');\n        }\n    };\n\n    const login = (email, password) => {\n        const options = {\n            method: 'POST',\n            credentials: 'include', // Include cookies\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({ email, password })\n        };\n\n        console.log('Sending login request with email:', email);\n        console.log('Sending login request with password:', password);\n\n        fetch('http://localhost:3001/login', options)\n            .then(response => response.json())\n            .then(data => {\n                if (data.success) {\n                    localStorage.setItem('nickname', data.nickname);\n                    navigate('/main');\n                    // toast.success(`${data.nickname}님 안녕하세요!`);\n                    // setTimeout(() => {\n                    //     navigate('/main');\n                    // }, 3000);\n                } else {\n                    toast.error(`인증 실패: ${data.message}`);\n                }\n            })\n            .catch(error => {\n                console.error('로그인 오류:', error);\n                toast.error('로그인 중 오류가 발생했습니다.');\n            });\n    };\n\n    return (\n        <form className=\"LoginForm\" onSubmit={handleSubmit}>\n            <div className=\"Text32\" style={{marginBottom: '51px'}}>Login</div>\n            <EmailInputField\n                value={email}\n                onChange={handleEmailChange}\n                placeholder=\"이메일을 입력하세요\"\n                error={emailError}\n            />\n            <PasswordInputField\n                value={password}\n                onChange={handlePasswordChange}\n                placeholder=\"비밀번호를 입력하세요\"\n                error={passwordError}\n            />\n\n            <button className=\"SubmitBtn\" style={{marginTop: '5px'}}>로그인</button>\n\n            <div className=\"signUpTextContainer\"\n                 style={{display: 'flex', justifyContent: 'center', alignItems: 'center', marginTop: '12px'}}>\n                <p style={{margin: 0, fontSize: '14px'}}>아직 계정이 없나요?</p>\n                <a href=\"/register\" className=\"Text14\" style={{marginLeft: '8px', fontWeight: '800'}}>회원가입</a>\n            </div>\n            <ToastContainer />\n        </form>\n    );\n};\n\nexport default LoginForm;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}