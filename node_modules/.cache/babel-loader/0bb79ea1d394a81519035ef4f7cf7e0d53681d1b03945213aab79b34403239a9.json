{"ast":null,"code":"var _jsxFileName = \"/Users/moolmin/Documents/GitHub/5-silvia-spring-fe/src/components/ProfileImgPicker.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ProfileImgPicker = ({\n  userId,\n  onImageUrlChange\n}) => {\n  _s();\n  const [profileImage, setProfileImage] = useState(null);\n  useEffect(() => {\n    const fetchUserData = async () => {\n      try {\n        const response = await fetch('http://localhost:3001/api/accounts', {\n          credentials: 'include'\n        });\n        if (!response.ok) {\n          throw new Error('Failed to fetch user data');\n        }\n        const data = await response.json();\n        if (!userId) {\n          console.error('userId is not set');\n          return;\n        }\n        const user = data.users.find(u => u.user_id.toString() === userId);\n        if (user) {\n          const profileImageUrl = user.profile_picture ? encodeURI(user.profile_picture) : null;\n          setProfileImage(profileImageUrl);\n          onImageUrlChange(profileImageUrl); // Notify parent component\n        }\n      } catch (error) {\n        console.error('Error fetching user data:', error);\n      }\n    };\n    fetchUserData();\n  }, [userId, onImageUrlChange]);\n  const handleFileChange = async e => {\n    const file = e.target.files[0];\n    if (file && userId) {\n      const formData = new FormData();\n      formData.append('profileimg', file);\n      try {\n        const response = await fetch(`http://localhost:3001/api/accounts/${userId}/profileimg`, {\n          method: 'POST',\n          body: formData,\n          credentials: 'include'\n        });\n        if (!response.ok) {\n          throw new Error('Failed to upload image');\n        }\n        const result = await response.json();\n        const imageUrl = encodeURI(result.profileimg); // Assuming the backend sends the full URL\n        setProfileImage(imageUrl); // Update the profile image after successful upload\n        onImageUrlChange(imageUrl); // Notify parent component\n      } catch (error) {\n        console.error('Error uploading image:', error);\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"profile-img-picker\",\n    children: /*#__PURE__*/_jsxDEV(\"label\", {\n      className: \"upload-button\",\n      style: {\n        backgroundImage: `url(${profileImage})`\n      },\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"ImgBlackFilter\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"file\",\n          onChange: handleFileChange,\n          style: {\n            display: 'none'\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"ProfilePickerLabel\",\n          children: \"\\uBCC0\\uACBD\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 9\n  }, this);\n};\n_s(ProfileImgPicker, \"OmAiYdzRGmYMpNP5dhzwPE827fA=\");\n_c = ProfileImgPicker;\nexport default ProfileImgPicker;\nvar _c;\n$RefreshReg$(_c, \"ProfileImgPicker\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","ProfileImgPicker","userId","onImageUrlChange","_s","profileImage","setProfileImage","fetchUserData","response","fetch","credentials","ok","Error","data","json","console","error","user","users","find","u","user_id","toString","profileImageUrl","profile_picture","encodeURI","handleFileChange","e","file","target","files","formData","FormData","append","method","body","result","imageUrl","profileimg","className","children","style","backgroundImage","type","onChange","display","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/moolmin/Documents/GitHub/5-silvia-spring-fe/src/components/ProfileImgPicker.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\n\nconst ProfileImgPicker = ({ userId, onImageUrlChange }) => {\n    const [profileImage, setProfileImage] = useState(null);\n\n    useEffect(() => {\n        const fetchUserData = async () => {\n            try {\n                const response = await fetch('http://localhost:3001/api/accounts', {\n                    credentials: 'include'\n                });\n                if (!response.ok) {\n                    throw new Error('Failed to fetch user data');\n                }\n                const data = await response.json();\n                if (!userId) {\n                    console.error('userId is not set');\n                    return;\n                }\n                const user = data.users.find(u => u.user_id.toString() === userId);\n                if (user) {\n                    const profileImageUrl = user.profile_picture ? encodeURI(user.profile_picture) : null;\n                    setProfileImage(profileImageUrl);\n                    onImageUrlChange(profileImageUrl); // Notify parent component\n                }\n            } catch (error) {\n                console.error('Error fetching user data:', error);\n            }\n        };\n\n        fetchUserData();\n    }, [userId, onImageUrlChange]);\n\n    const handleFileChange = async (e) => {\n        const file = e.target.files[0];\n        if (file && userId) {\n            const formData = new FormData();\n            formData.append('profileimg', file);\n\n            try {\n                const response = await fetch(`http://localhost:3001/api/accounts/${userId}/profileimg`, {\n                    method: 'POST',\n                    body: formData,\n                    credentials: 'include',\n                });\n\n                if (!response.ok) {\n                    throw new Error('Failed to upload image');\n                }\n                const result = await response.json();\n                const imageUrl = encodeURI(result.profileimg); // Assuming the backend sends the full URL\n                setProfileImage(imageUrl); // Update the profile image after successful upload\n                onImageUrlChange(imageUrl); // Notify parent component\n            } catch (error) {\n                console.error('Error uploading image:', error);\n            }\n        }\n    };\n\n    return (\n        <div className=\"profile-img-picker\">\n            <label className=\"upload-button\" style={{ backgroundImage: `url(${profileImage})` }}>\n                <div className=\"ImgBlackFilter\">\n                    <input type=\"file\" onChange={handleFileChange} style={{ display: 'none' }} />\n                    <span className=\"ProfilePickerLabel\">변경</span>\n                </div>\n            </label>\n        </div>\n    );\n};\n\nexport default ProfileImgPicker;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}