import { createElement, useRef, useState, useEffect, Fragment, cloneElement } from 'react';

function styleInject(css, ref) {
  if ( ref === void 0 ) ref = {};
  var insertAt = ref.insertAt;

  if (!css || typeof document === 'undefined') { return; }

  var head = document.head || document.getElementsByTagName('head')[0];
  var style = document.createElement('style');
  style.type = 'text/css';

  if (insertAt === 'top') {
    if (head.firstChild) {
      head.insertBefore(style, head.firstChild);
    } else {
      head.appendChild(style);
    }
  } else {
    head.appendChild(style);
  }

  if (style.styleSheet) {
    style.styleSheet.cssText = css;
  } else {
    style.appendChild(document.createTextNode(css));
  }
}

var css_248z = ".paginationControls {\r\n    display: flex;\r\n    flex-direction: row;\r\n  \r\n    flex-wrap: wrap;\r\n  \r\n    margin-left: auto;\r\n    margin-right: auto;\r\n    justify-content: center;\r\n  }\r\n  \r\n  .paginationContols__pageNoBtn {\r\n    display: block;\r\n  \r\n    background: transparent;\r\n    border: transparent;\r\n  \r\n    min-width: 2em;\r\n  \r\n    cursor: pointer;\r\n  }\r\n  .paginationContols__pageNoBtn--active {\r\n    border: 1px blue solid;\r\n  }\r\n  .paginationContols__pageNoBtn--hidden {\r\n    display: none;\r\n  }\r\n  .paginationContols__pageNoBtn--dotsAfter::after {\r\n    content: \" ... \";\r\n    color: black;\r\n  }\r\n  .paginationContols__pageNoBtn--dotsBefore::before {\r\n    content: \" ... \";\r\n    color: black;\r\n  }\r\n  \r\n  .paginationControls__arrowBtn {\r\n    display: block;\r\n  \r\n    background: transparent;\r\n    border: transparent;\r\n  \r\n    cursor: pointer;\r\n  }";
styleInject(css_248z);

var Navigation = function Navigation(_ref) {
  var handlePageChange = _ref.handlePageChange,
      currentPage = _ref.currentPage,
      pages = _ref.pages,
      infiniteFlip = _ref.infiniteFlip;
  return createElement("div", {
    className: "paginationControls"
  }, createElement("button", {
    className: "paginationControls__arrowBtn",
    onClick: function onClick() {
      return handlePageChange(0);
    },
    disabled: currentPage === 0 ? true : false,
    "aria-label": "First page"
  }, createElement("svg", {
    width: "1em",
    height: "1em",
    viewBox: "0 0 16 16",
    className: "bi bi-chevron-double-left",
    fill: "currentColor",
    xmlns: "http://www.w3.org/2000/svg"
  }, createElement("path", {
    fillRule: "evenodd",
    d: "M8.354 1.646a.5.5 0 0 1 0 .708L2.707 8l5.647 5.646a.5.5 0 0 1-.708.708l-6-6a.5.5 0 0 1 0-.708l6-6a.5.5 0 0 1 .708 0z"
  }), createElement("path", {
    fillRule: "evenodd",
    d: "M12.354 1.646a.5.5 0 0 1 0 .708L6.707 8l5.647 5.646a.5.5 0 0 1-.708.708l-6-6a.5.5 0 0 1 0-.708l6-6a.5.5 0 0 1 .708 0z"
  }))), createElement("button", {
    className: "paginationControls__arrowBtn",
    onClick: function onClick() {
      if (pages[currentPage - 1]) {
        handlePageChange(currentPage - 1);
      } else if (!pages[currentPage - 1] && infiniteFlip) {
        handlePageChange(pages.length - 1);
      }
    },
    disabled: infiniteFlip !== undefined && infiniteFlip === true ? false : currentPage === 0 ? true : false,
    "aria-label": "Previous page"
  }, createElement("svg", {
    className: "bi bi-chevron-left",
    width: "1em",
    height: "1em",
    viewBox: "0 0 20 20",
    fill: "currentColor",
    xmlns: "http://www.w3.org/2000/svg"
  }, createElement("path", {
    fillRule: "evenodd",
    d: "M13.354 3.646a.5.5 0 010 .708L7.707 10l5.647 5.646a.5.5 0 01-.708.708l-6-6a.5.5 0 010-.708l6-6a.5.5 0 01.708 0z",
    clipRule: "evenodd"
  }))), pages && pages.map(function (_page, index) {
    return createElement("button", {
      className: "paginationContols__pageNoBtn\n                  " + (index === currentPage ? "paginationContols__pageNoBtn--active" : "") + "\n                  " + (pages.length > 10 && index !== 0 && index !== pages.length - 1 && (currentPage > index ? currentPage - index > 3 : index - currentPage > 3) ? "paginationContols__pageNoBtn--hidden" : "") + "\n                  " + (pages.length > 10 && index !== 0 && index !== pages.length - 1 && currentPage > index && currentPage - index === 3 ? "paginationContols__pageNoBtn--dotsBefore" : "") + "\n                  " + (pages.length > 10 && index !== 0 && index !== pages.length - 1 && index > currentPage && index - currentPage === 3 ? "paginationContols__pageNoBtn--dotsAfter" : "") + "\n                  ",
      key: index,
      onClick: function onClick() {
        return handlePageChange(index);
      },
      disabled: index === currentPage,
      "aria-label": "Page number " + (index + 1)
    }, index + 1);
  }), createElement("button", {
    className: "paginationControls__arrowBtn",
    onClick: function onClick() {
      if (pages[currentPage + 1]) {
        handlePageChange(currentPage + 1);
      } else if (!pages[currentPage + 1] && infiniteFlip) {
        handlePageChange(0);
      }
    },
    disabled: infiniteFlip ? false : currentPage === pages.length - 1 ? true : false,
    "aria-label": "Next page"
  }, createElement("svg", {
    className: "bi bi-chevron-right",
    width: "1em",
    height: "1em",
    viewBox: "0 0 20 20",
    fill: "currentColor",
    xmlns: "http://www.w3.org/2000/svg"
  }, createElement("path", {
    fillRule: "evenodd",
    d: "M6.646 3.646a.5.5 0 01.708 0l6 6a.5.5 0 010 .708l-6 6a.5.5 0 01-.708-.708L12.293 10 6.646 4.354a.5.5 0 010-.708z",
    clipRule: "evenodd"
  }))), createElement("button", {
    className: "paginationControls__arrowBtn",
    onClick: function onClick() {
      return handlePageChange(pages.length - 1);
    },
    disabled: currentPage === pages.length - 1 ? true : false,
    "aria-label": "Last page"
  }, createElement("svg", {
    width: "1em",
    height: "1em",
    viewBox: "0 0 16 16",
    className: "bi bi-chevron-double-right",
    fill: "currentColor",
    xmlns: "http://www.w3.org/2000/svg"
  }, createElement("path", {
    fillRule: "evenodd",
    d: "M3.646 1.646a.5.5 0 0 1 .708 0l6 6a.5.5 0 0 1 0 .708l-6 6a.5.5 0 0 1-.708-.708L9.293 8 3.646 2.354a.5.5 0 0 1 0-.708z"
  }), createElement("path", {
    fillRule: "evenodd",
    d: "M7.646 1.646a.5.5 0 0 1 .708 0l6 6a.5.5 0 0 1 0 .708l-6 6a.5.5 0 0 1-.708-.708L13.293 8 7.646 2.354a.5.5 0 0 1 0-.708z"
  }))));
};

var css_248z$1 = ".pagination__paginationContainer {\r\n    position: relative;\r\n    overflow-x: hidden;\r\n}\r\n  \r\n@keyframes nextPage {\r\n  0% {\r\n    opacity: 0;\r\n    transform: translate(10em, 0);\r\n  }\r\n\r\n  100% {\r\n    opacity: 1;\r\n    transform: translate(0, 0);\r\n  }\r\n}\r\n\r\n@keyframes prevPage {\r\n  0% {\r\n    opacity: 0;\r\n    transform: translate(-10em, 0);\r\n  }\r\n\r\n  100% {\r\n    opacity: 1;\r\n    transform: translate(0, 0);\r\n  }\r\n}\r\n";
styleInject(css_248z$1);

/**
 * Pagination component with customizable transition animations
 *
 * @example
 * ```
 * <PaginationAnimated
 *   bottomNav={true}
 *   topNav={true}
 *   itemsOnPage={5}
 *   customNavigation={CustomNavigation}
 *   customNextAnimation={'nextPageCustom .7s forwards'}
 *   customPrevAnimation={'prevPageCustom .7s forwards'}
 *   delay={300}
 *   items={arrayOfObjects}
 *   entryProp="component"
 *   iterationKey="_id"
 *   children={
 *     <MyComponent
 *       handleDelete={handleDelete}
 *       handleEdit={handleEdit}
 *       commonState={commonState}
 *     />}
 * />
 * ```
 */

var PaginationAnimated = function PaginationAnimated(_ref) {
  var items = _ref.items,
      itemsOnPage = _ref.itemsOnPage,
      topNav = _ref.topNav,
      bottomNav = _ref.bottomNav,
      entryProp = _ref.entryProp,
      iterationKey = _ref.iterationKey,
      customNavigation = _ref.customNavigation,
      customNextAnimation = _ref.customNextAnimation,
      customPrevAnimation = _ref.customPrevAnimation,
      delay = _ref.delay,
      children = _ref.children;
  var containerRef = useRef(null);

  var _React$useState = useState(0),
      currentPage = _React$useState[0],
      setCurrentPage = _React$useState[1];

  var _React$useState2 = useState([]),
      pages = _React$useState2[0],
      setPages = _React$useState2[1];

  var CustomNavigation = customNavigation;
  var currentPageRef = useRef(null);

  var handlePageChange = function handlePageChange(pageNo) {
    if (currentPageRef.current !== null) {
      if (currentPage > pageNo) {
        currentPageRef.current.style.animation = customPrevAnimation ? customPrevAnimation : "prevPage .5s forwards";
      } else {
        currentPageRef.current.style.animation = customNextAnimation ? customNextAnimation : "nextPage .5s forwards";
      }

      setTimeout(function () {
        setCurrentPage(pageNo);
      }, delay ? delay : 0);
    }
  };

  useEffect(function () {
    var itemsPerPage = itemsOnPage ? itemsOnPage : 5;
    var workingPages = [];
    var workingPagesCurrentIndex = 0;

    if (items) {
      items.forEach(function (item) {
        if (workingPages[workingPagesCurrentIndex] && workingPages[workingPagesCurrentIndex].length >= itemsPerPage) workingPagesCurrentIndex++;
        if (workingPages[workingPagesCurrentIndex] === undefined) workingPages[workingPagesCurrentIndex] = [];
        workingPages[workingPagesCurrentIndex].push(item);
      });
    }

    setPages([].concat(workingPages));
  }, [items, itemsOnPage, setPages]);
  useEffect(function () {
    if (!pages[currentPage]) {
      setCurrentPage(currentPage - 1 > -1 ? currentPage - 1 : 0);
    }
  }, [currentPage, pages]);
  useEffect(function () {
    setCurrentPage(0);
  }, []);
  return createElement("div", {
    className: "pagination__paginationContainer"
  }, topNav || !bottomNav && !topNav ? CustomNavigation ? createElement(CustomNavigation, {
    handlePageChange: handlePageChange,
    currentPage: currentPage,
    pages: pages,
    getContainerRef: function getContainerRef() {
      return containerRef.current;
    }
  }) : createElement(Navigation, {
    handlePageChange: handlePageChange,
    currentPage: currentPage,
    pages: pages
  }) : null, createElement("div", {
    ref: currentPageRef,
    className: "paginationContainer__currentPageDiv",
    onAnimationEnd: function onAnimationEnd() {
      if (currentPageRef.current) {
        currentPageRef.current.style.animation = "";
      }
    }
  }, pages.length && pages[currentPage] && pages[currentPage].map(function (item, index) {
    var objectToClone = {};
    objectToClone[entryProp] = item;
    return createElement(Fragment, {
      key: iterationKey ? item[iterationKey] : item.id ? item.id : index
    }, cloneElement(children, objectToClone));
  })), bottomNav ? CustomNavigation ? createElement(CustomNavigation, {
    handlePageChange: handlePageChange,
    currentPage: currentPage,
    pages: pages,
    getContainerRef: function getContainerRef() {
      return containerRef.current;
    }
  }) : createElement(Navigation, {
    handlePageChange: handlePageChange,
    currentPage: currentPage,
    pages: pages
  }) : null);
};

/**
 * Pagination component with swipe support on touch screens
 *
 * @example
 * ```
 * <PaginationSwipeable
 *   infiniteFlip={true}
 *   bottomNav={true}
 *   topNav={true}
 *   itemsOnPage={5}
 *   customNavigation={CustomNavigation}
 *   customNextAnimation={'nextPageCustom .7s forwards'}
 *   customPrevAnimation={'prevPageCustom .7s forwards'}
 *   delay={300}
 *   touchSensitivity={10}
 *   items={arrayOfObjects}
 *   entryProp="component"
 *   iterationKey="_id"
 *   children={
 *     <MyComponent
 *       handleDelete={handleDelete}
 *       handleEdit={handleEdit}
 *       commonState={commonState}
 *     />}
 * />
 * ```
 */

var PaginationSwipeable = function PaginationSwipeable(_ref) {
  var items = _ref.items,
      itemsOnPage = _ref.itemsOnPage,
      topNav = _ref.topNav,
      bottomNav = _ref.bottomNav,
      infiniteFlip = _ref.infiniteFlip,
      entryProp = _ref.entryProp,
      iterationKey = _ref.iterationKey,
      customNavigation = _ref.customNavigation,
      customNextAnimation = _ref.customNextAnimation,
      customPrevAnimation = _ref.customPrevAnimation,
      delay = _ref.delay,
      touchSensitivity = _ref.touchSensitivity,
      children = _ref.children;

  var _touchSensitivity = touchSensitivity ? touchSensitivity : 30;

  var _React$useState = useState(0),
      currentPage = _React$useState[0],
      setCurrentPage = _React$useState[1];

  var _React$useState2 = useState([]),
      pages = _React$useState2[0],
      setPages = _React$useState2[1];

  var CustomNavigation = customNavigation;
  var currentPageRef = useRef(null);
  var containerRef = useRef(null); // Touch

  var _React$useState3 = useState(false),
      isDragging = _React$useState3[0],
      setIsDragging = _React$useState3[1];

  var _React$useState4 = useState(0),
      initialTouch = _React$useState4[0],
      setInitialTouch = _React$useState4[1];

  var _React$useState5 = useState(0),
      posLeft = _React$useState5[0],
      setPosLeft = _React$useState5[1];

  var _React$useState6 = useState(0),
      prevLeft = _React$useState6[0],
      setPrevLeft = _React$useState6[1];

  var divStyle = {
    position: isDragging ? "relative" : "static",
    left: isDragging ? posLeft : 0,
    overflowX: "hidden"
  };

  var _onTouchStart = function _onTouchStart(event) {
    setIsDragging(true);
    extractPositionDelta(event.nativeEvent.touches[0]);
    setInitialTouch(event.nativeEvent.touches[0].clientX); // these four lines added later

    var _extractPositionDelta = extractPositionDelta(event.nativeEvent.touches[0]),
        left = _extractPositionDelta.left;

    if (posLeft + left <= 0) {
      setPosLeft(posLeft + left);
    }
  };

  var _onTouchMove = function _onTouchMove(event) {
    if (!isDragging) {
      return;
    }

    var _extractPositionDelta2 = extractPositionDelta(event.nativeEvent.touches[0]),
        left = _extractPositionDelta2.left;

    if (Math.abs(posLeft) + Math.abs(left) > _touchSensitivity) {
      setPosLeft(posLeft + left);
    }
  };

  var _onTouchEnd = function _onTouchEnd(_event) {
    var delta = Math.abs(prevLeft) - Math.abs(posLeft);

    if (delta < -_touchSensitivity && posLeft < initialTouch) {
      if (pages[currentPage + 1]) {
        handlePageChange(currentPage + 1);
      } else if (!pages[currentPage + 1] && infiniteFlip) {
        handlePageChange(0);
      } else {
        setPosLeft(0);
        setPrevLeft(0);
        setInitialTouch(0);
        setIsDragging(false);
      }
    } else if (delta > _touchSensitivity && posLeft > initialTouch) {
      if (pages[currentPage - 1]) {
        handlePageChange(currentPage - 1);
      } else if (!pages[currentPage - 1] && infiniteFlip) {
        handlePageChange(pages.length - 1);
      } else {
        setPosLeft(0);
        setPrevLeft(0);
        setInitialTouch(0);
        setIsDragging(false);
      }
    } else {
      setPosLeft(0);
      setPrevLeft(0);
      setInitialTouch(0);
      setIsDragging(false);
    }
  };

  var extractPositionDelta = function extractPositionDelta(event) {
    var left = event.clientX;
    var delta = {
      left: left - prevLeft
    };
    setPrevLeft(left);
    return delta;
  };

  var handlePageChange = function handlePageChange(pageNo) {
    if (currentPageRef.current !== null) {
      if (currentPage > pageNo) {
        currentPageRef.current.style.animation = customPrevAnimation ? customPrevAnimation : "prevPage .5s forwards";
      } else {
        currentPageRef.current.style.animation = customNextAnimation ? customNextAnimation : "nextPage .5s forwards";
      }

      setTimeout(function () {
        setCurrentPage(pageNo);
        setPosLeft(0);
        setPrevLeft(0);
        setInitialTouch(0);
        setIsDragging(false);
      }, delay ? delay : 0);
    }
  };

  useEffect(function () {
    var itemsPerPage = itemsOnPage ? itemsOnPage : 5;
    var workingPages = [];
    var workingPagesCurrentIndex = 0;

    if (items) {
      items.forEach(function (item) {
        if (workingPages[workingPagesCurrentIndex] && workingPages[workingPagesCurrentIndex].length >= itemsPerPage) {
          workingPagesCurrentIndex++;
        }

        if (workingPages[workingPagesCurrentIndex] === undefined) {
          workingPages[workingPagesCurrentIndex] = [];
        }

        workingPages[workingPagesCurrentIndex].push(item);
      });
    }

    setPages([].concat(workingPages));
  }, [items, itemsOnPage, setPages]);
  useEffect(function () {
    if (!pages[currentPage]) {
      setCurrentPage(currentPage - 1 > -1 ? currentPage - 1 : 0);
    }
  }, [currentPage, pages]);
  useEffect(function () {
    setCurrentPage(0);
  }, []);
  return createElement("div", {
    className: "pagination__paginationContainer",
    ref: containerRef
  }, topNav || !bottomNav && !topNav ? CustomNavigation ? createElement(CustomNavigation, {
    handlePageChange: handlePageChange,
    currentPage: currentPage,
    pages: pages,
    infiniteFlip: infiniteFlip,
    getContainerRef: function getContainerRef() {
      return containerRef.current;
    }
  }) : createElement(Navigation, {
    handlePageChange: handlePageChange,
    currentPage: currentPage,
    pages: pages,
    infiniteFlip: infiniteFlip
  }) : null, createElement("div", {
    ref: currentPageRef,
    className: "paginationContainer__currentPageDiv",
    style: divStyle,
    onTouchStart: _onTouchStart,
    onTouchMove: _onTouchMove,
    onTouchEnd: _onTouchEnd,
    onTouchCancel: _onTouchEnd,
    onAnimationEnd: function onAnimationEnd() {
      if (currentPageRef.current) {
        currentPageRef.current.style.animation = "";
      }
    },
    "aria-label": "Current page"
  }, pages.length && pages[currentPage] && pages[currentPage].map(function (item, index) {
    var objectToClone = {};
    objectToClone[entryProp] = item;
    return createElement(Fragment, {
      key: iterationKey ? item[iterationKey] : item.id ? item.id : index
    }, cloneElement(children, objectToClone));
  })), bottomNav ? CustomNavigation ? createElement(CustomNavigation, {
    handlePageChange: handlePageChange,
    currentPage: currentPage,
    pages: pages,
    infiniteFlip: infiniteFlip,
    getContainerRef: function getContainerRef() {
      return containerRef.current;
    },
    getCurrentPageRef: function getCurrentPageRef() {
      return currentPageRef.current;
    }
  }) : createElement(Navigation, {
    handlePageChange: handlePageChange,
    currentPage: currentPage,
    pages: pages,
    infiniteFlip: infiniteFlip
  }) : null);
};

export { PaginationAnimated, PaginationSwipeable };
//# sourceMappingURL=react-animated-pagination.esm.js.map
