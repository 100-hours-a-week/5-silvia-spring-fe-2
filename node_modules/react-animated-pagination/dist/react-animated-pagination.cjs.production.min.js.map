{"version":3,"file":"react-animated-pagination.cjs.production.min.js","sources":["../node_modules/style-inject/dist/style-inject.es.js","../src/Navigation.tsx","../src/PaginationAnimated.tsx","../src/PaginationSwipeable.tsx"],"sourcesContent":["function styleInject(css, ref) {\n  if ( ref === void 0 ) ref = {};\n  var insertAt = ref.insertAt;\n\n  if (!css || typeof document === 'undefined') { return; }\n\n  var head = document.head || document.getElementsByTagName('head')[0];\n  var style = document.createElement('style');\n  style.type = 'text/css';\n\n  if (insertAt === 'top') {\n    if (head.firstChild) {\n      head.insertBefore(style, head.firstChild);\n    } else {\n      head.appendChild(style);\n    }\n  } else {\n    head.appendChild(style);\n  }\n\n  if (style.styleSheet) {\n    style.styleSheet.cssText = css;\n  } else {\n    style.appendChild(document.createTextNode(css));\n  }\n}\n\nexport default styleInject;\n","import * as React from 'react';\r\n\r\nimport './navigation.css';\r\n\r\n/**\r\n * A set of types for creating custom Navigation components\r\n * \r\n */\r\nexport type NavigationTypes = {\r\n    /**\r\n     * @param handlePageChange Handles changing the current visible page according to the provided index\r\n     * \r\n     * @example\r\n     * ```\r\n     * <button\r\n     *   handlePageChange(currentPage + 1)\r\n     * >\r\n     *   Next page\r\n     * </button>\r\n     * ```\r\n     */\r\n    handlePageChange: (arg0: number) => void,\r\n    /**\r\n     * @param currentPage The item in the pages array currently displayed in the pagination\r\n     * \r\n     * @example\r\n     * ```\r\n     * <button\r\n     *   handlePageChange(currentPage + 1)\r\n     * >\r\n     *   Next page\r\n     * </button>\r\n     * ```\r\n     */\r\n    currentPage: number,\r\n    /**\r\n     * @param pages The array of pages generated from the items passed to the Pagination component\r\n     * \r\n     * @example\r\n     * ```\r\n     * pages.map((_page: any, index: any) => (\r\n     *   <button\r\n     *     onClick={() => handlePageChange(index)}\r\n     *   >\r\n     *     {index + 1}\r\n     *   </button>\r\n     * ))\r\n     * ```\r\n     */\r\n    pages: [][],\r\n    /**\r\n     * @param infiniteFlip Is the infiniteFlip allowed (on PaginationSwipeable component)\r\n     * \r\n     * @example \r\n     * ```\r\n     * if (!pages[currentPage - 1] && infiniteFlip) {\r\n     *   handlePageChange(pages.length - 1);\r\n     * }\r\n     * ```\r\n     */\r\n    infiniteFlip? : boolean,\r\n    /**\r\n     * @param getContainerRef Returns a reference to the pagination container <div> element\r\n     * \r\n     * @example\r\n     * ```\r\n     * let containerRef = getContainerRef();\r\n     * containerRef.addEventListener(...)\r\n     * ```\r\n     */\r\n    getContainerRef?: () => HTMLDivElement,\r\n    /**\r\n     * @param getCurrentPageRef Returns a reference to the current page <div> element\r\n     * \r\n     * @example\r\n     * ```\r\n     * let currentPageRef = getCurrentPageRef();\r\n     * currentPageRef.addEventListener(...)\r\n     * ```\r\n     */\r\n    getCurrentPageRef?: () => HTMLDivElement\r\n}\r\n\r\nexport const Navigation: React.FC<NavigationTypes> = ({ \r\n    handlePageChange,\r\n    currentPage,\r\n    pages,\r\n    infiniteFlip\r\n}) => {\r\n  return (\r\n    <div className=\"paginationControls\">\r\n    <button\r\n      className=\"paginationControls__arrowBtn\"\r\n      onClick={() => handlePageChange(0)}\r\n      disabled={ currentPage === 0 ? true : false }\r\n      aria-label=\"First page\"\r\n    >\r\n      <svg\r\n        width=\"1em\"\r\n        height=\"1em\"\r\n        viewBox=\"0 0 16 16\"\r\n        className=\"bi bi-chevron-double-left\"\r\n        fill=\"currentColor\"\r\n        xmlns=\"http://www.w3.org/2000/svg\"\r\n      >\r\n        <path\r\n          fillRule=\"evenodd\"\r\n          d=\"M8.354 1.646a.5.5 0 0 1 0 .708L2.707 8l5.647 5.646a.5.5 0 0 1-.708.708l-6-6a.5.5 0 0 1 0-.708l6-6a.5.5 0 0 1 .708 0z\"\r\n        />\r\n        <path\r\n          fillRule=\"evenodd\"\r\n          d=\"M12.354 1.646a.5.5 0 0 1 0 .708L6.707 8l5.647 5.646a.5.5 0 0 1-.708.708l-6-6a.5.5 0 0 1 0-.708l6-6a.5.5 0 0 1 .708 0z\"\r\n        />\r\n      </svg>\r\n    </button>\r\n    <button\r\n      className=\"paginationControls__arrowBtn\"\r\n      onClick={() => {\r\n        if (pages[currentPage - 1]) {\r\n          handlePageChange(currentPage - 1)\r\n        } else if (!pages[currentPage - 1] && infiniteFlip) {\r\n          handlePageChange(pages.length - 1)\r\n        }\r\n      }}\r\n      disabled={ infiniteFlip !== undefined && infiniteFlip === true ? false : (currentPage === 0 ? true : false)}\r\n      aria-label=\"Previous page\"\r\n    >\r\n      <svg\r\n        className=\"bi bi-chevron-left\"\r\n        width=\"1em\"\r\n        height=\"1em\"\r\n        viewBox=\"0 0 20 20\"\r\n        fill=\"currentColor\"\r\n        xmlns=\"http://www.w3.org/2000/svg\"\r\n      >\r\n        <path\r\n          fillRule=\"evenodd\"\r\n          d=\"M13.354 3.646a.5.5 0 010 .708L7.707 10l5.647 5.646a.5.5 0 01-.708.708l-6-6a.5.5 0 010-.708l6-6a.5.5 0 01.708 0z\"\r\n          clipRule=\"evenodd\"\r\n        />\r\n      </svg>\r\n    </button>\r\n    {pages &&\r\n      pages.map((_page: any, index: any) => (\r\n        <button\r\n          className={`paginationContols__pageNoBtn\r\n                  ${\r\n                    index === currentPage\r\n                      ? \"paginationContols__pageNoBtn--active\"\r\n                      : \"\"\r\n                  }\r\n                  ${\r\n                    pages.length > 10 &&\r\n                    index !== 0 &&\r\n                    index !== pages.length - 1 &&\r\n                    (currentPage > index\r\n                      ? currentPage - index > 3\r\n                      : index - currentPage > 3)\r\n                      ? \"paginationContols__pageNoBtn--hidden\"\r\n                      : \"\"\r\n                  }\r\n                  ${\r\n                    pages.length > 10 &&\r\n                    index !== 0 &&\r\n                    index !== pages.length - 1 &&\r\n                    currentPage > index &&\r\n                    currentPage - index === 3\r\n                      ? \"paginationContols__pageNoBtn--dotsBefore\"\r\n                      : \"\"\r\n                  }\r\n                  ${\r\n                    pages.length > 10 &&\r\n                    index !== 0 &&\r\n                    index !== pages.length - 1 &&\r\n                    index > currentPage &&\r\n                    index - currentPage === 3\r\n                      ? \"paginationContols__pageNoBtn--dotsAfter\"\r\n                      : \"\"\r\n                  }\r\n                  `}\r\n          key={index}\r\n          onClick={() => handlePageChange(index)}\r\n          disabled={index === currentPage}\r\n          aria-label={`Page number ${index + 1}`}\r\n        >\r\n          {index + 1}\r\n        </button>\r\n      ))}\r\n    <button\r\n      className=\"paginationControls__arrowBtn\"\r\n      onClick={() => {\r\n        if (pages[currentPage + 1]) {\r\n          handlePageChange(currentPage + 1)\r\n        } else if (!pages[currentPage + 1] && infiniteFlip) {\r\n          handlePageChange(0)\r\n        }\r\n      }}\r\n      disabled={infiniteFlip ? false : (currentPage === pages.length - 1 ? true : false)}\r\n      aria-label=\"Next page\"\r\n    >\r\n      <svg\r\n        className=\"bi bi-chevron-right\"\r\n        width=\"1em\"\r\n        height=\"1em\"\r\n        viewBox=\"0 0 20 20\"\r\n        fill=\"currentColor\"\r\n        xmlns=\"http://www.w3.org/2000/svg\"\r\n      >\r\n        <path\r\n          fillRule=\"evenodd\"\r\n          d=\"M6.646 3.646a.5.5 0 01.708 0l6 6a.5.5 0 010 .708l-6 6a.5.5 0 01-.708-.708L12.293 10 6.646 4.354a.5.5 0 010-.708z\"\r\n          clipRule=\"evenodd\"\r\n        />\r\n      </svg>\r\n    </button>\r\n    <button\r\n      className=\"paginationControls__arrowBtn\"\r\n      onClick={() => handlePageChange(pages.length - 1)}\r\n      disabled={currentPage === pages.length -1 ? true : false }\r\n      aria-label=\"Last page\"\r\n    >\r\n      <svg\r\n        width=\"1em\"\r\n        height=\"1em\"\r\n        viewBox=\"0 0 16 16\"\r\n        className=\"bi bi-chevron-double-right\"\r\n        fill=\"currentColor\"\r\n        xmlns=\"http://www.w3.org/2000/svg\"\r\n      >\r\n        <path\r\n          fillRule=\"evenodd\"\r\n          d=\"M3.646 1.646a.5.5 0 0 1 .708 0l6 6a.5.5 0 0 1 0 .708l-6 6a.5.5 0 0 1-.708-.708L9.293 8 3.646 2.354a.5.5 0 0 1 0-.708z\"\r\n        />\r\n        <path\r\n          fillRule=\"evenodd\"\r\n          d=\"M7.646 1.646a.5.5 0 0 1 .708 0l6 6a.5.5 0 0 1 0 .708l-6 6a.5.5 0 0 1-.708-.708L13.293 8 7.646 2.354a.5.5 0 0 1 0-.708z\"\r\n        />\r\n      </svg>\r\n    </button>\r\n  </div>\r\n  )\r\n};\r\n","import * as React from 'react';\r\nimport { Navigation } from './Navigation';\r\n\r\nimport './pagination.css';\r\n\r\nexport type PaginationAnimatedTypes = {\r\n  /** \r\n   * @param items An array of JavaScript Objects to be paginated\r\n   * \r\n   * @example items={fetchedArray}\r\n   * */\r\n  items: Array<any>,\r\n  /**\r\n   * @param itemsOnPage A number of items on each page, defaults to 5 \r\n   * \r\n   * @example itemsOnPage={10}\r\n  */\r\n    itemsOnPage?: number,\r\n  /** \r\n   * @param topNav To show top navigation or not\r\n   * \r\n   * If neither @param bottomNav nor @param topNav are specified, defaults to showing top navigation\r\n   * \r\n   * @example topNav={true}\r\n   */\r\n    topNav?: boolean,\r\n  /** \r\n   * @param bottomNav To show bottom navigation or not\r\n   * \r\n   * If neither @param bottomNav nor @param topNav are specified, defaults to showing top navigation\r\n   * \r\n   * @example bottomNav={true}\r\n   */\r\n    bottomNav?: boolean,\r\n  /** \r\n   * @param entryProp The prop to be cloned during the iteration process\r\n   * \r\n   * @example \r\n   * \r\n   * ```\r\n   * const MyComponent = ({ component }) => {...}\r\n   * \r\n   * ...\r\n   * \r\n   * <PaginationAnimated\r\n   *   entryProp=\"component\"\r\n   *   children={<MyComponent />}\r\n   *   ...\r\n   * />\r\n   * ```\r\n   */\r\n    entryProp: string,\r\n   /**\r\n   * @param iterationKey The key for the iteration to tell React which field of the Object to use as key prop during the iteration. \r\n   * \r\n   * Defaults to \"id\", fallbacks to the item's index (**warning**: indices are not reliable iteration keys)\r\n   * \r\n   * @example iterationKey=\"_id\"\r\n   */    \r\n    iterationKey?: string,\r\n   /**\r\n   * @param customNavigation Custom Navigation component to use instead of the built-in one.\r\n   * \r\n   * @example \r\n   * ```\r\n   * import MyNavigation from \"./MyNavigation.js\";\r\n   * ...\r\n   * customNavigation={MyNavigation}\r\n   * ```\r\n   */\r\n    customNavigation?: any,\r\n   /**\r\n   * @param customNextAnimation The CSS transition animation to the next page.\r\n   * \r\n   * **Note**: animation should be in the Parent's scope to run correctly.\r\n   * \r\n   * @example \r\n   * ```\r\n   * import \"./myAnimations.css\";\r\n   * ...\r\n   * customNextAnimation=\"myNextAnimation 1s forwards\"\r\n   * ```\r\n   */\r\n    customNextAnimation? : string,\r\n   /**\r\n   * @param customPrevAnimation The CSS transition animation to the previous page.\r\n   * \r\n   * **Note**: animation should be in the Parent's scope to run correctly.\r\n   * \r\n   * @example \r\n   * ```\r\n   * import \"./myAnimations.css\";\r\n   * ...\r\n   * customPrevAnimation=\"myPrevAnimation 1s forwards\"\r\n   * ```\r\n   */\r\n    customPrevAnimation? : string,\r\n  /**\r\n   * @param delay The delay of switching the pages in milliseconds.\r\n   * \r\n   * Can be used to achieve smoother custom animation effects.\r\n   * \r\n   * @example delay={300}\r\n   */\r\n    delay?: number,\r\n  /**\r\n   * @param children The React Component to be rendered in the pagination, all the props except for the @param entryProp can be directly passed here. \r\n   * \r\n   * @example \r\n   * \r\n   * ```\r\n   * const MyComponent = ({ component }) => {...}\r\n   * \r\n   * ...\r\n   * \r\n   * <PaginationAnimated\r\n   *   entryProp=\"component\"\r\n   *   children={<MyComponent />}\r\n   *   ...\r\n   * />\r\n   * ```\r\n   */\r\n    children: React.ReactElement\r\n}\r\n\r\n\r\n/**\r\n * Pagination component with customizable transition animations\r\n * \r\n * @example \r\n * ```\r\n * <PaginationAnimated\r\n *   bottomNav={true}\r\n *   topNav={true}\r\n *   itemsOnPage={5}\r\n *   customNavigation={CustomNavigation}\r\n *   customNextAnimation={'nextPageCustom .7s forwards'}\r\n *   customPrevAnimation={'prevPageCustom .7s forwards'}\r\n *   delay={300}\r\n *   items={arrayOfObjects}\r\n *   entryProp=\"component\"\r\n *   iterationKey=\"_id\"\r\n *   children={\r\n *     <MyComponent \r\n *       handleDelete={handleDelete} \r\n *       handleEdit={handleEdit} \r\n *       commonState={commonState}\r\n *     />}\r\n * />\r\n * ```\r\n */\r\nexport const PaginationAnimated: React.FC<PaginationAnimatedTypes> = ({\r\n    items,\r\n    itemsOnPage,\r\n    topNav,\r\n    bottomNav,\r\n    entryProp,\r\n    iterationKey,\r\n    customNavigation,\r\n    customNextAnimation,\r\n    customPrevAnimation,\r\n    delay,\r\n    children\r\n  }) => {    \r\n    let containerRef = React.useRef<HTMLDivElement>(null);\r\n    \r\n    const [currentPage, setCurrentPage] = React.useState(0);\r\n    const [pages, setPages] = React.useState<Array<any>>([]);\r\n\r\n    const CustomNavigation = customNavigation;\r\n  \r\n    let currentPageRef = React.useRef<HTMLDivElement>(null);\r\n  \r\n    const handlePageChange = (pageNo: number) => {\r\n\r\n      if (currentPageRef.current !== null) {     \r\n      \r\n          if (currentPage > pageNo) {\r\n            currentPageRef.current.style.animation = customPrevAnimation ? customPrevAnimation : \"prevPage .5s forwards\";\r\n          } else {\r\n            currentPageRef.current.style.animation = customNextAnimation ? customNextAnimation : \"nextPage .5s forwards\";\r\n          }\r\n\r\n          setTimeout(() => {\r\n            setCurrentPage(pageNo);\r\n          }, delay ? delay : 0) \r\n      }\r\n    };\r\n  \r\n    React.useEffect(() => {\r\n      let itemsPerPage = itemsOnPage ? itemsOnPage : 5;\r\n      let workingPages: Array<any>[] = [];\r\n      let workingPagesCurrentIndex = 0;\r\n  \r\n      if (items) {\r\n        items.forEach((item) => {\r\n          if (\r\n            workingPages[workingPagesCurrentIndex] &&\r\n            workingPages[workingPagesCurrentIndex].length >= itemsPerPage\r\n          )\r\n            workingPagesCurrentIndex++;\r\n  \r\n          if (workingPages[workingPagesCurrentIndex] === undefined)\r\n            workingPages[workingPagesCurrentIndex] = [];\r\n  \r\n          workingPages[workingPagesCurrentIndex].push(item);\r\n        });\r\n      }\r\n  \r\n      setPages([...workingPages]);\r\n    }, [items, itemsOnPage, setPages]);\r\n  \r\n    React.useEffect(() => {\r\n      if (!pages[currentPage]) {\r\n        setCurrentPage(currentPage - 1 > -1 ? currentPage - 1 : 0);\r\n      }\r\n    }, [currentPage, pages]);\r\n  \r\n    React.useEffect(() => {\r\n      setCurrentPage(0);\r\n    }, []);\r\n  \r\n    return (\r\n      <div className=\"pagination__paginationContainer\">\r\n        {\r\n        topNav || (!bottomNav && !topNav) \r\n        ? \r\n        (\r\n            CustomNavigation\r\n            ?\r\n            <CustomNavigation\r\n                handlePageChange={handlePageChange}\r\n                currentPage={currentPage}\r\n                pages={pages}\r\n                getContainerRef={() => containerRef.current}\r\n            />\r\n            :\r\n            <Navigation\r\n                handlePageChange={handlePageChange}\r\n                currentPage={currentPage}\r\n                pages={pages}\r\n            />\r\n        )\r\n        : \r\n        null\r\n        }\r\n        <div\r\n          ref={currentPageRef}\r\n          className={`paginationContainer__currentPageDiv`}\r\n          onAnimationEnd={() => {\r\n            if (currentPageRef.current) {\r\n              currentPageRef.current.style.animation = \"\"\r\n            }\r\n         }}\r\n        >\r\n          {pages.length &&\r\n            pages[currentPage] &&\r\n            pages[currentPage].map((item: any, index: number) => {\r\n              let objectToClone: any = {};\r\n              objectToClone[entryProp] = item;\r\n              return (\r\n                <React.Fragment key={iterationKey ? item[iterationKey] : (item.id ? item.id : index) }>\r\n                  {React.cloneElement(children, objectToClone)}\r\n                </React.Fragment>\r\n              );\r\n            })}\r\n        </div>\r\n        {\r\n        bottomNav\r\n        ? \r\n        (\r\n            CustomNavigation\r\n            ?\r\n            <CustomNavigation\r\n                handlePageChange={handlePageChange}\r\n                currentPage={currentPage}\r\n                pages={pages}\r\n                getContainerRef={() => containerRef.current}\r\n            />\r\n            :\r\n            <Navigation\r\n                handlePageChange={handlePageChange}\r\n                currentPage={currentPage}\r\n                pages={pages}\r\n            />\r\n        )\r\n        : \r\n        null\r\n        }\r\n      </div>\r\n    );\r\n  };\r\n","import * as React from 'react';\r\nimport { Navigation } from './Navigation';\r\n\r\nimport './pagination.css';\r\n\r\nexport type PaginationSwipeableTypes = {\r\n  /** \r\n   * @param items An array of JavaScript Objects to be paginated\r\n   * \r\n   * @example items={fetchedArray}\r\n   * */\r\n    items: Array<any>,\r\n  /**\r\n   * @param itemsOnPage A number of items on each page, defaults to 5 \r\n   * \r\n   * @example itemsOnPage={10}\r\n  */\r\n    itemsOnPage?: number,\r\n  /** \r\n   * @param topNav To show top navigation or not\r\n   * \r\n   * If neither @param bottomNav nor @param topNav are specified, defaults to showing top navigation\r\n   * \r\n   * @example topNav={true}\r\n   */\r\n    topNav?: boolean,\r\n  /** \r\n   * @param bottomNav To show bottom navigation or not\r\n   * \r\n   * If neither @param bottomNav nor @param topNav are specified, defaults to showing top navigation\r\n   * \r\n   * @example bottomNav={true}\r\n   */\r\n    bottomNav?: boolean,\r\n  /** \r\n   * @param infiniteFlip Allow infinite flipping of the pages (only on PaginationSwipeable)\r\n   * \r\n   * @example infiniteFlip={true}\r\n   */ \r\n    infiniteFlip?: boolean,\r\n  /** \r\n   * @param entryProp The prop to be cloned during the iteration process\r\n   * \r\n   * @example \r\n   * \r\n   * ```\r\n   * const MyComponent = ({ component }) => {...}\r\n   * \r\n   * ...\r\n   * \r\n   * <PaginationSwipeable\r\n   *   entryProp=\"component\"\r\n   *   children={<MyComponent />}\r\n   *   ...\r\n   * />\r\n   * ```\r\n   */\r\n    entryProp: string,\r\n   /**\r\n   * @param iterationKey The key for the iteration to tell React which field of the Object to use as key prop during the iteration. \r\n   * \r\n   * Defaults to \"id\", fallbacks to the item's index (**warning**: indices are not reliable iteration keys)\r\n   * \r\n   * @example iterationKey=\"_id\"\r\n   */    \r\n    iterationKey?: string,\r\n   /**\r\n   * @param customNavigation Custom Navigation component to use instead of the built-in one.\r\n   * \r\n   * @example \r\n   * ```\r\n   * import MyNavigation from \"./MyNavigation.js\";\r\n   * ...\r\n   * customNavigation={MyNavigation}\r\n   * ```\r\n   */\r\n    customNavigation?: any,\r\n   /**\r\n   * @param customNextAnimation The CSS transition animation to the next page.\r\n   * \r\n   * **Note**: animation should be in the Parent's scope to run correctly.\r\n   * \r\n   * @example \r\n   * ```\r\n   * import \"./myAnimations.css\";\r\n   * ...\r\n   * customNextAnimation=\"myNextAnimation 1s forwards\"\r\n   * ```\r\n   */\r\n    customNextAnimation? : string,\r\n   /**\r\n   * @param customPrevAnimation The CSS transition animation to the previous page.\r\n   * \r\n   * **Note**: animation should be in the Parent's scope to run correctly.\r\n   * \r\n   * @example \r\n   * ```\r\n   * import \"./myAnimations.css\";\r\n   * ...\r\n   * customPrevAnimation=\"myPrevAnimation 1s forwards\"\r\n   * ```\r\n   */\r\n    customPrevAnimation? : string,\r\n  /**\r\n   * @param delay The delay of switching the pages in milliseconds.\r\n   * \r\n   * Can be used to achieve smoother custom animation effects.\r\n   * \r\n   * @example delay={300}\r\n   */\r\n    delay?: number,\r\n  \r\n  /**\r\n   * @param touchSensitivity A number representing touch sensititvity: from which point to start dragging the page, at which point to run changing to the next/previous page\r\n   * \r\n   * Defaults to 30\r\n   * \r\n   * @example touchSensitivity={10}\r\n   */\r\n    touchSensitivity?: number,\r\n  /**\r\n   * @param children The React Component to be rendered in the pagination, all the props except for the @param entryProp can be directly passed here. \r\n   * \r\n   * @example \r\n   * \r\n   * ```\r\n   * const MyComponent = ({ component }) => {...}\r\n   * \r\n   * ...\r\n   * \r\n   * <PaginationSwipeable\r\n   *   entryProp=\"component\"\r\n   *   children={<MyComponent />}\r\n   *   ...\r\n   * />\r\n   * ```\r\n   */\r\n    children: React.ReactElement\r\n}\r\n\r\n\r\n/**\r\n * Pagination component with swipe support on touch screens\r\n * \r\n * @example \r\n * ```\r\n * <PaginationSwipeable\r\n *   infiniteFlip={true}\r\n *   bottomNav={true}\r\n *   topNav={true}\r\n *   itemsOnPage={5}\r\n *   customNavigation={CustomNavigation}\r\n *   customNextAnimation={'nextPageCustom .7s forwards'}\r\n *   customPrevAnimation={'prevPageCustom .7s forwards'}\r\n *   delay={300}\r\n *   touchSensitivity={10}\r\n *   items={arrayOfObjects}\r\n *   entryProp=\"component\"\r\n *   iterationKey=\"_id\"\r\n *   children={\r\n *     <MyComponent \r\n *       handleDelete={handleDelete} \r\n *       handleEdit={handleEdit} \r\n *       commonState={commonState}\r\n *     />}\r\n * />\r\n * ```\r\n */\r\nexport const PaginationSwipeable: React.FC<PaginationSwipeableTypes> = ({\r\n    items,\r\n    itemsOnPage,\r\n    topNav,\r\n    bottomNav,\r\n    infiniteFlip,\r\n    entryProp,\r\n    iterationKey,\r\n    customNavigation,\r\n    customNextAnimation,\r\n    customPrevAnimation,\r\n    delay,\r\n    touchSensitivity,\r\n    children\r\n  }) => {\r\n    let _touchSensitivity = touchSensitivity ? touchSensitivity : 30\r\n    const [currentPage, setCurrentPage] = React.useState(0);\r\n    const [pages, setPages] = React.useState<Array<any>>([]);\r\n\r\n    const CustomNavigation = customNavigation;\r\n  \r\n    let currentPageRef = React.useRef<HTMLDivElement>(null);\r\n\r\n    let containerRef = React.useRef<HTMLDivElement>(null);\r\n  \r\n    // Touch\r\n    const [isDragging, setIsDragging] = React.useState(false);\r\n    const [initialTouch, setInitialTouch] = React.useState(0);\r\n    const [posLeft, setPosLeft] = React.useState(0);\r\n    const [prevLeft, setPrevLeft] = React.useState(0);\r\n  \r\n    const divStyle: React.CSSProperties = {\r\n      position: isDragging ? \"relative\" : \"static\",\r\n      left: isDragging ? posLeft : 0,\r\n      overflowX: \"hidden\"\r\n    };\r\n  \r\n    const _onTouchStart = (event: any) => {\r\n      setIsDragging(true);\r\n      extractPositionDelta(event.nativeEvent.touches[0]);\r\n      setInitialTouch(event.nativeEvent.touches[0].clientX);\r\n  \r\n      // these four lines added later\r\n      const { left } = extractPositionDelta(event.nativeEvent.touches[0]);\r\n  \r\n      if (posLeft + left <= 0) {\r\n        setPosLeft(posLeft + left);\r\n      }\r\n    };\r\n  \r\n    const _onTouchMove = (event: any) => {\r\n      if (!isDragging) {\r\n        return;\r\n      }\r\n      const { left } = extractPositionDelta(event.nativeEvent.touches[0]);\r\n  \r\n      if (Math.abs(posLeft) + Math.abs(left) > _touchSensitivity) {\r\n        setPosLeft(posLeft + left);\r\n      }\r\n    };\r\n  \r\n    const _onTouchEnd = (_event: any) => {\r\n      let delta = Math.abs(prevLeft) - Math.abs(posLeft);\r\n  \r\n      if (delta < -_touchSensitivity && posLeft < initialTouch) {\r\n        if (pages[currentPage + 1]) {\r\n          handlePageChange(currentPage + 1)\r\n        } else if (!pages[currentPage + 1] && infiniteFlip) {\r\n          handlePageChange(0)\r\n        } else {\r\n          setPosLeft(0);\r\n          setPrevLeft(0);\r\n          setInitialTouch(0);\r\n          setIsDragging(false);\r\n        }\r\n      } else if (delta > _touchSensitivity && posLeft > initialTouch) {\r\n        if (pages[currentPage - 1]) {\r\n          handlePageChange(currentPage - 1)\r\n        } else if (!pages[currentPage - 1] && infiniteFlip) {\r\n          handlePageChange(pages.length - 1)\r\n        } else {\r\n          setPosLeft(0);\r\n          setPrevLeft(0);\r\n          setInitialTouch(0);\r\n          setIsDragging(false);\r\n        }\r\n      } else {\r\n        setPosLeft(0);\r\n        setPrevLeft(0);\r\n        setInitialTouch(0);\r\n        setIsDragging(false);\r\n      }\r\n  \r\n    };\r\n  \r\n    const extractPositionDelta = (event: any) => {\r\n      const left = event.clientX;\r\n  \r\n      const delta = {\r\n        left: left - prevLeft\r\n      };\r\n  \r\n      setPrevLeft(left);\r\n  \r\n      return delta;\r\n    };\r\n  \r\n    const handlePageChange = (pageNo: number) => {\r\n        if (currentPageRef.current !== null) {      \r\n        \r\n            if (currentPage > pageNo) {\r\n              currentPageRef.current.style.animation = customPrevAnimation ? customPrevAnimation : \"prevPage .5s forwards\";\r\n            } else {\r\n              currentPageRef.current.style.animation = customNextAnimation ? customNextAnimation : \"nextPage .5s forwards\";\r\n            }\r\n            setTimeout(() => {\r\n              setCurrentPage(pageNo);\r\n              setPosLeft(0);\r\n              setPrevLeft(0);\r\n              setInitialTouch(0);\r\n              setIsDragging(false);\r\n            }, delay ? delay : 0) \r\n\r\n        }\r\n    };\r\n  \r\n    React.useEffect(() => {\r\n        let itemsPerPage = itemsOnPage ? itemsOnPage : 5;\r\n        let workingPages: Array<any>[] = [];\r\n        let workingPagesCurrentIndex = 0;\r\n\r\n        \r\n    \r\n        if (items) {\r\n          items.forEach((item) => {\r\n            if (\r\n              workingPages[workingPagesCurrentIndex] &&\r\n              workingPages[workingPagesCurrentIndex].length >= itemsPerPage\r\n            ) {\r\n              workingPagesCurrentIndex++;\r\n            }\r\n    \r\n            if (workingPages[workingPagesCurrentIndex] === undefined) {\r\n              workingPages[workingPagesCurrentIndex] = [];\r\n            }\r\n    \r\n            workingPages[workingPagesCurrentIndex].push(item);\r\n          });\r\n        }\r\n    \r\n        setPages([...workingPages]);\r\n    }, [items, itemsOnPage, setPages]);\r\n  \r\n    React.useEffect(() => { \r\n      if (!pages[currentPage]) {\r\n        setCurrentPage(currentPage - 1 > -1 ? currentPage - 1 : 0);\r\n      }\r\n    }, [currentPage, pages]);\r\n  \r\n    React.useEffect(() => {\r\n      setCurrentPage(0);\r\n    }, []);\r\n  \r\n    return (\r\n      <div className=\"pagination__paginationContainer\" ref={containerRef}>\r\n        {\r\n        topNav || (!bottomNav && !topNav) \r\n        ? \r\n        (\r\n            CustomNavigation\r\n            ?\r\n            <CustomNavigation\r\n                handlePageChange={handlePageChange}\r\n                currentPage={currentPage}\r\n                pages={pages}\r\n                infiniteFlip={infiniteFlip}\r\n                getContainerRef={() => containerRef.current}\r\n            />\r\n            :\r\n            <Navigation\r\n                handlePageChange={handlePageChange}\r\n                currentPage={currentPage}\r\n                pages={pages}\r\n                infiniteFlip={infiniteFlip}\r\n            />\r\n        )\r\n        : \r\n        null\r\n        }\r\n        <div\r\n          ref={currentPageRef}\r\n          className={`paginationContainer__currentPageDiv`}\r\n          style={divStyle}\r\n          onTouchStart={_onTouchStart}\r\n          onTouchMove={_onTouchMove}\r\n          onTouchEnd={_onTouchEnd}\r\n          onTouchCancel={_onTouchEnd}\r\n          onAnimationEnd={() => {\r\n             if (currentPageRef.current) {\r\n               currentPageRef.current.style.animation = \"\"\r\n             }\r\n          }}\r\n          aria-label=\"Current page\"\r\n        >\r\n          {pages.length &&\r\n            pages[currentPage] &&\r\n            pages[currentPage].map((item: any, index: number) => {\r\n              let objectToClone: any = {};\r\n              objectToClone[entryProp] = item;\r\n              return (\r\n                <React.Fragment key={iterationKey ? item[iterationKey] : (item.id ? item.id : index) }>\r\n                  {React.cloneElement(children, objectToClone)}\r\n                </React.Fragment>\r\n              );\r\n            })}\r\n        </div>\r\n        {\r\n        bottomNav\r\n        ? \r\n        (\r\n            CustomNavigation\r\n            ?\r\n            <CustomNavigation\r\n                handlePageChange={handlePageChange}\r\n                currentPage={currentPage}\r\n                pages={pages}\r\n                infiniteFlip={infiniteFlip}\r\n                getContainerRef={() => containerRef.current}\r\n                getCurrentPageRef={() => currentPageRef.current}\r\n            />\r\n            :\r\n            <Navigation\r\n                handlePageChange={handlePageChange}\r\n                currentPage={currentPage}\r\n                pages={pages}\r\n                infiniteFlip={infiniteFlip}\r\n            />\r\n        )\r\n        : \r\n        null\r\n        }\r\n      </div>\r\n    );\r\n  };\r\n  \r\n  export default PaginationSwipeable;"],"names":["styleInject","css","ref","insertAt","document","head","getElementsByTagName","style","createElement","type","firstChild","insertBefore","appendChild","styleSheet","cssText","createTextNode","Navigation","handlePageChange","currentPage","pages","infiniteFlip","React","className","onClick","disabled","width","height","viewBox","fill","xmlns","fillRule","d","length","undefined","clipRule","map","_page","index","key","items","itemsOnPage","topNav","bottomNav","entryProp","iterationKey","customNavigation","customNextAnimation","customPrevAnimation","delay","children","containerRef","setCurrentPage","setPages","CustomNavigation","currentPageRef","pageNo","current","animation","setTimeout","itemsPerPage","workingPages","workingPagesCurrentIndex","forEach","item","push","getContainerRef","onAnimationEnd","objectToClone","id","_touchSensitivity","touchSensitivity","isDragging","setIsDragging","initialTouch","setInitialTouch","posLeft","setPosLeft","prevLeft","setPrevLeft","divStyle","position","left","overflowX","_onTouchEnd","_event","delta","Math","abs","extractPositionDelta","event","clientX","onTouchStart","nativeEvent","touches","onTouchMove","onTouchEnd","onTouchCancel","getCurrentPageRef"],"mappings":"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"}