import * as React from 'react';
import './pagination.css';
export declare type PaginationSwipeableTypes = {
    /**
     * @param items An array of JavaScript Objects to be paginated
     *
     * @example items={fetchedArray}
     * */
    items: Array<any>;
    /**
     * @param itemsOnPage A number of items on each page, defaults to 5
     *
     * @example itemsOnPage={10}
    */
    itemsOnPage?: number;
    /**
     * @param topNav To show top navigation or not
     *
     * If neither @param bottomNav nor @param topNav are specified, defaults to showing top navigation
     *
     * @example topNav={true}
     */
    topNav?: boolean;
    /**
     * @param bottomNav To show bottom navigation or not
     *
     * If neither @param bottomNav nor @param topNav are specified, defaults to showing top navigation
     *
     * @example bottomNav={true}
     */
    bottomNav?: boolean;
    /**
     * @param infiniteFlip Allow infinite flipping of the pages (only on PaginationSwipeable)
     *
     * @example infiniteFlip={true}
     */
    infiniteFlip?: boolean;
    /**
     * @param entryProp The prop to be cloned during the iteration process
     *
     * @example
     *
     * ```
     * const MyComponent = ({ component }) => {...}
     *
     * ...
     *
     * <PaginationSwipeable
     *   entryProp="component"
     *   children={<MyComponent />}
     *   ...
     * />
     * ```
     */
    entryProp: string;
    /**
    * @param iterationKey The key for the iteration to tell React which field of the Object to use as key prop during the iteration.
    *
    * Defaults to "id", fallbacks to the item's index (**warning**: indices are not reliable iteration keys)
    *
    * @example iterationKey="_id"
    */
    iterationKey?: string;
    /**
    * @param customNavigation Custom Navigation component to use instead of the built-in one.
    *
    * @example
    * ```
    * import MyNavigation from "./MyNavigation.js";
    * ...
    * customNavigation={MyNavigation}
    * ```
    */
    customNavigation?: any;
    /**
    * @param customNextAnimation The CSS transition animation to the next page.
    *
    * **Note**: animation should be in the Parent's scope to run correctly.
    *
    * @example
    * ```
    * import "./myAnimations.css";
    * ...
    * customNextAnimation="myNextAnimation 1s forwards"
    * ```
    */
    customNextAnimation?: string;
    /**
    * @param customPrevAnimation The CSS transition animation to the previous page.
    *
    * **Note**: animation should be in the Parent's scope to run correctly.
    *
    * @example
    * ```
    * import "./myAnimations.css";
    * ...
    * customPrevAnimation="myPrevAnimation 1s forwards"
    * ```
    */
    customPrevAnimation?: string;
    /**
     * @param delay The delay of switching the pages in milliseconds.
     *
     * Can be used to achieve smoother custom animation effects.
     *
     * @example delay={300}
     */
    delay?: number;
    /**
     * @param touchSensitivity A number representing touch sensititvity: from which point to start dragging the page, at which point to run changing to the next/previous page
     *
     * Defaults to 30
     *
     * @example touchSensitivity={10}
     */
    touchSensitivity?: number;
    /**
     * @param children The React Component to be rendered in the pagination, all the props except for the @param entryProp can be directly passed here.
     *
     * @example
     *
     * ```
     * const MyComponent = ({ component }) => {...}
     *
     * ...
     *
     * <PaginationSwipeable
     *   entryProp="component"
     *   children={<MyComponent />}
     *   ...
     * />
     * ```
     */
    children: React.ReactElement;
};
/**
 * Pagination component with swipe support on touch screens
 *
 * @example
 * ```
 * <PaginationSwipeable
 *   infiniteFlip={true}
 *   bottomNav={true}
 *   topNav={true}
 *   itemsOnPage={5}
 *   customNavigation={CustomNavigation}
 *   customNextAnimation={'nextPageCustom .7s forwards'}
 *   customPrevAnimation={'prevPageCustom .7s forwards'}
 *   delay={300}
 *   touchSensitivity={10}
 *   items={arrayOfObjects}
 *   entryProp="component"
 *   iterationKey="_id"
 *   children={
 *     <MyComponent
 *       handleDelete={handleDelete}
 *       handleEdit={handleEdit}
 *       commonState={commonState}
 *     />}
 * />
 * ```
 */
export declare const PaginationSwipeable: React.FC<PaginationSwipeableTypes>;
export default PaginationSwipeable;
